CCS PCH C Compiler, Version 5.008, 5967               13-nov-20 13:00

               Filename:   D:\FACENS\Semestre_09\TCC1\Programa\ControleTelescopio.lst

               ROM used:   8672 bytes (26%)
                           Largest free fragment is 24096
               RAM used:   34 (2%) at main() level
                           87 (4%) worst case
               Stack used: 9 locations
               Stack size: 31

*
0000:  GOTO   214E
.................... /************************************************************** 
.................... * Programa: SISTEMA DE ORIENTAÇÃO MOTORIZADO PARA TELESCÓPIOS *                              
.................... * Autor: CAINÃ ANTUNES SILVA                                  * 
.................... **************************************************************/ 
....................  
.................... #include <18f4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
0018:  DATA 54,65
001A:  DATA 6C,65
001C:  DATA 73,63
001E:  DATA 6F,70
0020:  DATA 65,43
0022:  DATA 6F,6E
0024:  DATA 74,72
0026:  DATA 6F,6C
0028:  DATA 00,00
002A:  DATA 41,67
002C:  DATA 75,61
002E:  DATA 72,64
0030:  DATA 65,00
0032:  DATA 45,73
0034:  DATA 63,6F
0036:  DATA 6C,68
0038:  DATA 61,20
003A:  DATA 75,6D
003C:  DATA 20,70
003E:  DATA 6F,6C
0040:  DATA 6F,3A
0042:  DATA 00,00
0044:  DATA 4E,6F
0046:  DATA 72,74
0048:  DATA 65,28
004A:  DATA 31,29
004C:  DATA 20,20
004E:  DATA 53,75
0050:  DATA 6C,28
0052:  DATA 32,29
0054:  DATA 00,00
0056:  DATA 20,43
0058:  DATA 6F,6E
005A:  DATA 66,69
005C:  DATA 72,6D
005E:  DATA 61,72
0060:  DATA 20,70
0062:  DATA 6F,6C
0064:  DATA 6F,20
0066:  DATA 00,00
0068:  DATA 20,20
006A:  DATA 20,20
006C:  DATA 20,4E
006E:  DATA 6F,72
0070:  DATA 74,65
0072:  DATA 3F,20
0074:  DATA 20,20
0076:  DATA 20,20
0078:  DATA 00,00
007A:  DATA 20,20
007C:  DATA 20,20
007E:  DATA 20,20
0080:  DATA 53,75
0082:  DATA 6C,3F
0084:  DATA 20,20
0086:  DATA 20,20
0088:  DATA 20,20
008A:  DATA 00,00
008C:  DATA 41,6C
008E:  DATA 69,6E
0090:  DATA 68,61
0092:  DATA 6D,65
0094:  DATA 6E,74
0096:  DATA 6F,20
0098:  DATA 20,4F
009A:  DATA 4B,3F
009C:  DATA 00,00
009E:  DATA 41,48
00A0:  DATA 3D,31
00A2:  DATA 38,68
00A4:  DATA 20,44
00A6:  DATA 45,43
00A8:  DATA 3D,39
00AA:  DATA 30,64
00AC:  DATA 65,67
00AE:  DATA 00,00
00B0:  DATA 41,48
00B2:  DATA 3D,36
00B4:  DATA 68,20
00B6:  DATA 44,45
00B8:  DATA 43,3D
00BA:  DATA 2D,39
00BC:  DATA 30,64
00BE:  DATA 65,67
00C0:  DATA 00,00
00C2:  DATA 45,73
00C4:  DATA 63,6F
00C6:  DATA 6C,68
00C8:  DATA 61,20
00CA:  DATA 75,6D
00CC:  DATA 20,6D
00CE:  DATA 6F,64
00D0:  DATA 6F,3A
00D2:  DATA 00,00
00D4:  DATA 4D,61
00D6:  DATA 6E,75
00D8:  DATA 61,6C
00DA:  DATA 28,31
00DC:  DATA 29,41
00DE:  DATA 75,74
00E0:  DATA 6F,28
00E2:  DATA 32,29
00E4:  DATA 00,00
00E6:  DATA 20,41
00E8:  DATA 63,6F
00EA:  DATA 6D,70
00EC:  DATA 61,6E
00EE:  DATA 68,61
00F0:  DATA 6D,65
00F2:  DATA 6E,74
00F4:  DATA 6F,20
00F6:  DATA 00,00
00F8:  DATA 20,20
00FA:  DATA 20,20
00FC:  DATA 20,6C
00FE:  DATA 69,67
0100:  DATA 61,64
0102:  DATA 6F,20
0104:  DATA 20,20
0106:  DATA 20,20
0108:  DATA 00,00
010A:  DATA 41,48
010C:  DATA 3D,00
010E:  DATA 73,20
0110:  DATA 20,20
0112:  DATA 20,00
0114:  DATA 44,45
0116:  DATA 43,3D
0118:  DATA 2B,00
011A:  DATA 44,45
011C:  DATA 43,3D
011E:  DATA 2D,00
0120:  DATA 64,65
0122:  DATA 67,20
0124:  DATA 00,00
0126:  DATA 41,48
0128:  DATA 3D,00
012A:  DATA 44,45
012C:  DATA 43,3D
012E:  DATA 00,00
0130:  DATA 64,65
0132:  DATA 67,00
0134:  DATA 20,56
0136:  DATA 61,6C
0138:  DATA 6F,72
013A:  DATA 20,49
013C:  DATA 6E,76
013E:  DATA 61,6C
0140:  DATA 69,64
0142:  DATA 6F,20
0144:  DATA 00,00
*
02C8:  TBLRD*+
02CA:  MOVF   FF5,F
02CC:  BZ    02E6
02CE:  MOVFF  FF6,43
02D2:  MOVFF  FF7,44
02D6:  MOVFF  FF5,45
02DA:  RCALL  0286
02DC:  MOVFF  43,FF6
02E0:  MOVFF  44,FF7
02E4:  BRA    02C8
02E6:  RETURN 0
*
0590:  MOVLW  8E
0592:  MOVWF  00
0594:  MOVF   45,W
0596:  SUBWF  00,F
0598:  MOVFF  46,02
059C:  MOVFF  47,01
05A0:  BSF    02.7
05A2:  MOVF   00,F
05A4:  BZ    05B8
05A6:  BCF    FD8.0
05A8:  MOVF   02,F
05AA:  BNZ   05B0
05AC:  MOVF   01,F
05AE:  BZ    05B8
05B0:  RRCF   02,F
05B2:  RRCF   01,F
05B4:  DECFSZ 00,F
05B6:  BRA    05A6
05B8:  BTFSS  46.7
05BA:  BRA    05C6
05BC:  COMF   01,F
05BE:  COMF   02,F
05C0:  INCF   01,F
05C2:  BTFSC  FD8.2
05C4:  INCF   02,F
05C6:  RETURN 0
05C8:  MOVLW  8E
05CA:  MOVWF  00
05CC:  MOVFF  48,01
05D0:  MOVFF  47,02
05D4:  CLRF   03
05D6:  MOVF   01,F
05D8:  BNZ   05EC
05DA:  MOVFF  02,01
05DE:  CLRF   02
05E0:  MOVLW  08
05E2:  SUBWF  00,F
05E4:  MOVF   01,F
05E6:  BNZ   05EC
05E8:  CLRF   00
05EA:  BRA    05FC
05EC:  BCF    FD8.0
05EE:  BTFSC  01.7
05F0:  BRA    05FA
05F2:  RLCF   02,F
05F4:  RLCF   01,F
05F6:  DECF   00,F
05F8:  BRA    05EC
05FA:  BCF    01.7
05FC:  RETURN 0
05FE:  MOVLW  80
0600:  BTFSC  FD8.1
0602:  XORWF  4C,F
0604:  CLRF   51
0606:  CLRF   52
0608:  MOVFF  48,50
060C:  MOVF   4C,W
060E:  XORWF  50,F
0610:  MOVF   47,W
0612:  BTFSC  FD8.2
0614:  BRA    07CE
0616:  MOVWF  4F
0618:  MOVWF  00
061A:  MOVF   4B,W
061C:  BTFSC  FD8.2
061E:  BRA    07E0
0620:  SUBWF  4F,F
0622:  BTFSC  FD8.2
0624:  BRA    0728
0626:  BNC   06A2
0628:  MOVFF  4C,55
062C:  BSF    55.7
062E:  MOVFF  4D,54
0632:  MOVFF  4E,53
0636:  CLRF   52
0638:  BCF    FD8.0
063A:  RRCF   55,F
063C:  RRCF   54,F
063E:  RRCF   53,F
0640:  RRCF   52,F
0642:  DECFSZ 4F,F
0644:  BRA    0636
0646:  BTFSS  50.7
0648:  BRA    0650
064A:  BSF    51.0
064C:  BRA    0808
064E:  BCF    51.0
0650:  BCF    4F.0
0652:  BSF    51.4
0654:  CLRF   FEA
0656:  MOVLW  4A
0658:  MOVWF  FE9
065A:  BRA    082E
065C:  BCF    51.4
065E:  BTFSC  50.7
0660:  BRA    0676
0662:  BTFSS  4F.0
0664:  BRA    068C
0666:  RRCF   55,F
0668:  RRCF   54,F
066A:  RRCF   53,F
066C:  RRCF   52,F
066E:  INCF   00,F
0670:  BTFSC  FD8.2
0672:  BRA    07FE
0674:  BRA    068C
0676:  BTFSC  55.7
0678:  BRA    0692
067A:  BCF    FD8.0
067C:  RLCF   52,F
067E:  RLCF   53,F
0680:  RLCF   54,F
0682:  RLCF   55,F
0684:  DECF   00,F
0686:  BTFSC  FD8.2
0688:  BRA    07FE
068A:  BRA    0676
068C:  BSF    51.6
068E:  BRA    0766
0690:  BCF    51.6
0692:  MOVFF  48,50
0696:  BTFSS  48.7
0698:  BRA    069E
069A:  BSF    55.7
069C:  BRA    07F0
069E:  BCF    55.7
06A0:  BRA    07F0
06A2:  MOVFF  4B,4F
06A6:  MOVFF  4B,00
06AA:  MOVF   47,W
06AC:  SUBWF  4F,F
06AE:  MOVFF  48,55
06B2:  BSF    55.7
06B4:  MOVFF  49,54
06B8:  MOVFF  4A,53
06BC:  CLRF   52
06BE:  BCF    FD8.0
06C0:  RRCF   55,F
06C2:  RRCF   54,F
06C4:  RRCF   53,F
06C6:  RRCF   52,F
06C8:  DECFSZ 4F,F
06CA:  BRA    06BC
06CC:  BTFSS  50.7
06CE:  BRA    06D6
06D0:  BSF    51.1
06D2:  BRA    0808
06D4:  BCF    51.1
06D6:  BCF    4F.0
06D8:  BSF    51.5
06DA:  CLRF   FEA
06DC:  MOVLW  4E
06DE:  MOVWF  FE9
06E0:  BRA    082E
06E2:  BCF    51.5
06E4:  BTFSC  50.7
06E6:  BRA    06FC
06E8:  BTFSS  4F.0
06EA:  BRA    0712
06EC:  RRCF   55,F
06EE:  RRCF   54,F
06F0:  RRCF   53,F
06F2:  RRCF   52,F
06F4:  INCF   00,F
06F6:  BTFSC  FD8.2
06F8:  BRA    07FE
06FA:  BRA    0712
06FC:  BTFSC  55.7
06FE:  BRA    0718
0700:  BCF    FD8.0
0702:  RLCF   52,F
0704:  RLCF   53,F
0706:  RLCF   54,F
0708:  RLCF   55,F
070A:  DECF   00,F
070C:  BTFSC  FD8.2
070E:  BRA    07FE
0710:  BRA    06FC
0712:  BSF    51.7
0714:  BRA    0766
0716:  BCF    51.7
0718:  MOVFF  4C,50
071C:  BTFSS  4C.7
071E:  BRA    0724
0720:  BSF    55.7
0722:  BRA    07F0
0724:  BCF    55.7
0726:  BRA    07F0
0728:  MOVFF  4C,55
072C:  BSF    55.7
072E:  MOVFF  4D,54
0732:  MOVFF  4E,53
0736:  BTFSS  50.7
0738:  BRA    0742
073A:  BCF    55.7
073C:  BSF    51.2
073E:  BRA    0808
0740:  BCF    51.2
0742:  CLRF   52
0744:  BCF    4F.0
0746:  CLRF   FEA
0748:  MOVLW  4A
074A:  MOVWF  FE9
074C:  BRA    082E
074E:  BTFSC  50.7
0750:  BRA    078A
0752:  MOVFF  48,50
0756:  BTFSS  4F.0
0758:  BRA    0766
075A:  RRCF   55,F
075C:  RRCF   54,F
075E:  RRCF   53,F
0760:  RRCF   52,F
0762:  INCF   00,F
0764:  BZ    07FE
0766:  BTFSS  52.7
0768:  BRA    0780
076A:  INCF   53,F
076C:  BNZ   0780
076E:  INCF   54,F
0770:  BNZ   0780
0772:  INCF   55,F
0774:  BNZ   0780
0776:  RRCF   55,F
0778:  RRCF   54,F
077A:  RRCF   53,F
077C:  INCF   00,F
077E:  BZ    07FE
0780:  BTFSC  51.6
0782:  BRA    0690
0784:  BTFSC  51.7
0786:  BRA    0716
0788:  BRA    07C2
078A:  MOVLW  80
078C:  XORWF  55,F
078E:  BTFSS  55.7
0790:  BRA    079A
0792:  BRA    0808
0794:  MOVFF  4C,50
0798:  BRA    07AE
079A:  MOVFF  48,50
079E:  MOVF   55,F
07A0:  BNZ   07AE
07A2:  MOVF   54,F
07A4:  BNZ   07AE
07A6:  MOVF   53,F
07A8:  BNZ   07AE
07AA:  CLRF   00
07AC:  BRA    07F0
07AE:  BTFSC  55.7
07B0:  BRA    07C2
07B2:  BCF    FD8.0
07B4:  RLCF   52,F
07B6:  RLCF   53,F
07B8:  RLCF   54,F
07BA:  RLCF   55,F
07BC:  DECFSZ 00,F
07BE:  BRA    07AE
07C0:  BRA    07FE
07C2:  BTFSS  50.7
07C4:  BRA    07CA
07C6:  BSF    55.7
07C8:  BRA    07F0
07CA:  BCF    55.7
07CC:  BRA    07F0
07CE:  MOVFF  4B,00
07D2:  MOVFF  4C,55
07D6:  MOVFF  4D,54
07DA:  MOVFF  4E,53
07DE:  BRA    07F0
07E0:  MOVFF  47,00
07E4:  MOVFF  48,55
07E8:  MOVFF  49,54
07EC:  MOVFF  4A,53
07F0:  MOVFF  55,01
07F4:  MOVFF  54,02
07F8:  MOVFF  53,03
07FC:  BRA    0866
07FE:  CLRF   00
0800:  CLRF   01
0802:  CLRF   02
0804:  CLRF   03
0806:  BRA    0866
0808:  CLRF   52
080A:  COMF   53,F
080C:  COMF   54,F
080E:  COMF   55,F
0810:  COMF   52,F
0812:  INCF   52,F
0814:  BNZ   0820
0816:  INCF   53,F
0818:  BNZ   0820
081A:  INCF   54,F
081C:  BNZ   0820
081E:  INCF   55,F
0820:  BTFSC  51.0
0822:  BRA    064E
0824:  BTFSC  51.1
0826:  BRA    06D4
0828:  BTFSC  51.2
082A:  BRA    0740
082C:  BRA    0794
082E:  MOVF   FEF,W
0830:  ADDWF  53,F
0832:  BNC   083E
0834:  INCF   54,F
0836:  BNZ   083E
0838:  INCF   55,F
083A:  BTFSC  FD8.2
083C:  BSF    4F.0
083E:  MOVF   FED,F
0840:  MOVF   FEF,W
0842:  ADDWF  54,F
0844:  BNC   084C
0846:  INCF   55,F
0848:  BTFSC  FD8.2
084A:  BSF    4F.0
084C:  MOVF   FED,F
084E:  MOVF   FEF,W
0850:  BTFSC  FEF.7
0852:  BRA    0856
0854:  XORLW  80
0856:  ADDWF  55,F
0858:  BTFSC  FD8.0
085A:  BSF    4F.0
085C:  BTFSC  51.4
085E:  BRA    065C
0860:  BTFSC  51.5
0862:  BRA    06E2
0864:  BRA    074E
0866:  RETURN 0
0868:  MOVF   47,W
086A:  BTFSC  FD8.2
086C:  BRA    0950
086E:  MOVWF  00
0870:  MOVF   4B,W
0872:  BTFSC  FD8.2
0874:  BRA    0950
0876:  ADDWF  00,F
0878:  BNC   0882
087A:  MOVLW  81
087C:  ADDWF  00,F
087E:  BC    0950
0880:  BRA    088A
0882:  MOVLW  7F
0884:  SUBWF  00,F
0886:  BNC   0950
0888:  BZ    0950
088A:  MOVFF  48,4F
088E:  MOVF   4C,W
0890:  XORWF  4F,F
0892:  BSF    48.7
0894:  BSF    4C.7
0896:  MOVF   4A,W
0898:  MULWF  4E
089A:  MOVFF  FF4,51
089E:  MOVF   49,W
08A0:  MULWF  4D
08A2:  MOVFF  FF4,03
08A6:  MOVFF  FF3,50
08AA:  MULWF  4E
08AC:  MOVF   FF3,W
08AE:  ADDWF  51,F
08B0:  MOVF   FF4,W
08B2:  ADDWFC 50,F
08B4:  MOVLW  00
08B6:  ADDWFC 03,F
08B8:  MOVF   4A,W
08BA:  MULWF  4D
08BC:  MOVF   FF3,W
08BE:  ADDWF  51,F
08C0:  MOVF   FF4,W
08C2:  ADDWFC 50,F
08C4:  MOVLW  00
08C6:  CLRF   02
08C8:  ADDWFC 03,F
08CA:  ADDWFC 02,F
08CC:  MOVF   48,W
08CE:  MULWF  4E
08D0:  MOVF   FF3,W
08D2:  ADDWF  50,F
08D4:  MOVF   FF4,W
08D6:  ADDWFC 03,F
08D8:  MOVLW  00
08DA:  ADDWFC 02,F
08DC:  MOVF   48,W
08DE:  MULWF  4D
08E0:  MOVF   FF3,W
08E2:  ADDWF  03,F
08E4:  MOVF   FF4,W
08E6:  ADDWFC 02,F
08E8:  MOVLW  00
08EA:  CLRF   01
08EC:  ADDWFC 01,F
08EE:  MOVF   4A,W
08F0:  MULWF  4C
08F2:  MOVF   FF3,W
08F4:  ADDWF  50,F
08F6:  MOVF   FF4,W
08F8:  ADDWFC 03,F
08FA:  MOVLW  00
08FC:  ADDWFC 02,F
08FE:  ADDWFC 01,F
0900:  MOVF   49,W
0902:  MULWF  4C
0904:  MOVF   FF3,W
0906:  ADDWF  03,F
0908:  MOVF   FF4,W
090A:  ADDWFC 02,F
090C:  MOVLW  00
090E:  ADDWFC 01,F
0910:  MOVF   48,W
0912:  MULWF  4C
0914:  MOVF   FF3,W
0916:  ADDWF  02,F
0918:  MOVF   FF4,W
091A:  ADDWFC 01,F
091C:  INCF   00,F
091E:  BTFSC  01.7
0920:  BRA    092C
0922:  RLCF   50,F
0924:  RLCF   03,F
0926:  RLCF   02,F
0928:  RLCF   01,F
092A:  DECF   00,F
092C:  MOVLW  00
092E:  BTFSS  50.7
0930:  BRA    0946
0932:  INCF   03,F
0934:  ADDWFC 02,F
0936:  ADDWFC 01,F
0938:  MOVF   01,W
093A:  BNZ   0946
093C:  MOVF   02,W
093E:  BNZ   0946
0940:  MOVF   03,W
0942:  BNZ   0946
0944:  INCF   00,F
0946:  BTFSC  4F.7
0948:  BSF    01.7
094A:  BTFSS  4F.7
094C:  BCF    01.7
094E:  BRA    0958
0950:  CLRF   00
0952:  CLRF   01
0954:  CLRF   02
0956:  CLRF   03
0958:  RETURN 0
*
09A6:  MOVF   FEF,F
09A8:  BZ    09C8
09AA:  MOVFF  FEA,44
09AE:  MOVFF  FE9,43
09B2:  MOVFF  FEF,45
09B6:  RCALL  0286
09B8:  MOVFF  44,FEA
09BC:  MOVFF  43,FE9
09C0:  INCF   FE9,F
09C2:  BTFSC  FD8.2
09C4:  INCF   FEA,F
09C6:  BRA    09A6
09C8:  RETURN 0
09CA:  MOVFF  44,4B
09CE:  MOVF   48,W
09D0:  XORWF  4B,F
09D2:  BTFSS  4B.7
09D4:  BRA    09E0
09D6:  BCF    FD8.2
09D8:  BCF    FD8.0
09DA:  BTFSC  44.7
09DC:  BSF    FD8.0
09DE:  BRA    0A3E
09E0:  MOVFF  44,4B
09E4:  MOVFF  47,4C
09E8:  MOVF   43,W
09EA:  SUBWF  4C,F
09EC:  BZ    09FA
09EE:  BTFSS  4B.7
09F0:  BRA    0A3E
09F2:  MOVF   FD8,W
09F4:  XORLW  01
09F6:  MOVWF  FD8
09F8:  BRA    0A3E
09FA:  MOVFF  48,4C
09FE:  MOVF   44,W
0A00:  SUBWF  4C,F
0A02:  BZ    0A10
0A04:  BTFSS  4B.7
0A06:  BRA    0A3E
0A08:  MOVF   FD8,W
0A0A:  XORLW  01
0A0C:  MOVWF  FD8
0A0E:  BRA    0A3E
0A10:  MOVFF  49,4C
0A14:  MOVF   45,W
0A16:  SUBWF  4C,F
0A18:  BZ    0A26
0A1A:  BTFSS  4B.7
0A1C:  BRA    0A3E
0A1E:  MOVF   FD8,W
0A20:  XORLW  01
0A22:  MOVWF  FD8
0A24:  BRA    0A3E
0A26:  MOVFF  4A,4C
0A2A:  MOVF   46,W
0A2C:  SUBWF  4C,F
0A2E:  BZ    0A3C
0A30:  BTFSS  4B.7
0A32:  BRA    0A3E
0A34:  MOVF   FD8,W
0A36:  XORLW  01
0A38:  MOVWF  FD8
0A3A:  BRA    0A3E
0A3C:  BCF    FD8.0
0A3E:  RETURN 0
*
1670:  MOVF   2F,W
1672:  CLRF   01
1674:  SUBWF  2E,W
1676:  BC    167E
1678:  MOVFF  2E,00
167C:  BRA    1696
167E:  CLRF   00
1680:  MOVLW  08
1682:  MOVWF  30
1684:  RLCF   2E,F
1686:  RLCF   00,F
1688:  MOVF   2F,W
168A:  SUBWF  00,W
168C:  BTFSC  FD8.0
168E:  MOVWF  00
1690:  RLCF   01,F
1692:  DECFSZ 30,F
1694:  BRA    1684
1696:  RETURN 0
1698:  CLRF   01
169A:  CLRF   02
169C:  CLRF   00
169E:  CLRF   03
16A0:  MOVF   31,W
16A2:  BNZ   16A8
16A4:  MOVF   30,W
16A6:  BZ    16D8
16A8:  MOVLW  10
16AA:  MOVWF  32
16AC:  BCF    FD8.0
16AE:  RLCF   2E,F
16B0:  RLCF   2F,F
16B2:  RLCF   00,F
16B4:  RLCF   03,F
16B6:  MOVF   31,W
16B8:  SUBWF  03,W
16BA:  BNZ   16C0
16BC:  MOVF   30,W
16BE:  SUBWF  00,W
16C0:  BNC   16D0
16C2:  MOVF   30,W
16C4:  SUBWF  00,F
16C6:  BTFSS  FD8.0
16C8:  DECF   03,F
16CA:  MOVF   31,W
16CC:  SUBWF  03,F
16CE:  BSF    FD8.0
16D0:  RLCF   01,F
16D2:  RLCF   02,F
16D4:  DECFSZ 32,F
16D6:  BRA    16AC
16D8:  RETURN 0
16DA:  MOVF   2E,W
16DC:  MULWF  30
16DE:  MOVFF  FF3,01
16E2:  MOVFF  FF4,00
16E6:  MULWF  31
16E8:  MOVF   FF3,W
16EA:  ADDWF  00,F
16EC:  MOVF   2F,W
16EE:  MULWF  30
16F0:  MOVF   FF3,W
16F2:  ADDWFC 00,W
16F4:  MOVWF  02
16F6:  RETURN 0
....................  
.................... #list 
....................  
.................... #define PASSOS_MOTOR 2048 // Quantidade de passos do motor 
....................  
.................... #fuses hs,nowdt,noprotect,put,nobrownout,nolvp,nocpd,PLL5,CPUDIV1  
....................  
.................... #use delay(crystal=20Mhz,clock=48MHz) 
*
0146:  CLRF   FEA
0148:  MOVLW  46
014A:  MOVWF  FE9
014C:  MOVF   FEF,W
014E:  BZ    016C
0150:  MOVLW  0F
0152:  MOVWF  01
0154:  CLRF   00
0156:  DECFSZ 00,F
0158:  BRA    0156
015A:  DECFSZ 01,F
015C:  BRA    0154
015E:  MOVLW  8F
0160:  MOVWF  00
0162:  DECFSZ 00,F
0164:  BRA    0162
0166:  NOP   
0168:  DECFSZ FEF,F
016A:  BRA    0150
016C:  RETURN 0
....................  
.................... #include <LCDKIT.c> // biblioteca do Kit  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
018E:  MOVLW  F0
0190:  MOVWF  F95
....................       lcd.rw = 1; 
0192:  BSF    F83.1
....................       delay_cycles(1); 
0194:  NOP   
....................       lcd.enable = 1; 
0196:  BSF    F83.2
....................       delay_cycles(1); 
0198:  NOP   
....................       high = lcd.data; 
019A:  SWAPF  F83,W
019C:  ANDLW  0F
019E:  MOVWF  4D
....................       lcd.enable = 0; 
01A0:  BCF    F83.2
....................       delay_cycles(1); 
01A2:  NOP   
....................       lcd.enable = 1; 
01A4:  BSF    F83.2
....................       delay_us(1); 
01A6:  MOVLW  03
01A8:  MOVWF  00
01AA:  DECFSZ 00,F
01AC:  BRA    01AA
01AE:  BRA    01B0
....................       low = lcd.data; 
01B0:  SWAPF  F83,W
01B2:  ANDLW  0F
01B4:  MOVWF  4C
....................       lcd.enable = 0; 
01B6:  BCF    F83.2
....................       set_tris_lcd(LCD_WRITE); 
01B8:  MOVLW  00
01BA:  MOVWF  F95
....................       return( (high<<4) | low); 
01BC:  SWAPF  4D,W
01BE:  MOVWF  00
01C0:  MOVLW  F0
01C2:  ANDWF  00,F
01C4:  MOVF   00,W
01C6:  IORWF  4C,W
01C8:  MOVWF  01
01CA:  GOTO   01D2 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
016E:  SWAPF  4D,W
0170:  ANDLW  F0
0172:  MOVWF  00
0174:  MOVLW  0F
0176:  ANDWF  F83,W
0178:  IORWF  00,W
017A:  MOVWF  F83
....................       delay_cycles(1); 
017C:  NOP   
....................       lcd.enable = 1; 
017E:  BSF    F83.2
....................       delay_us(2); 
0180:  MOVLW  07
0182:  MOVWF  00
0184:  DECFSZ 00,F
0186:  BRA    0184
0188:  BRA    018A
....................       lcd.enable = 0; 
018A:  BCF    F83.2
018C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
01CE:  BCF    F83.0
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
01D0:  BRA    018E
01D2:  MOVFF  01,4C
01D6:  BTFSC  01.7
01D8:  BRA    01D0
....................       lcd.rs = address; 
01DA:  BTFSS  4A.0
01DC:  BCF    F83.0
01DE:  BTFSC  4A.0
01E0:  BSF    F83.0
....................       delay_cycles(1); 
01E2:  NOP   
....................       lcd.rw = 0; 
01E4:  BCF    F83.1
....................       delay_cycles(1); 
01E6:  NOP   
....................       lcd.enable = 0; 
01E8:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
01EA:  SWAPF  4B,W
01EC:  MOVWF  4C
01EE:  MOVLW  0F
01F0:  ANDWF  4C,F
01F2:  MOVFF  4C,4D
01F6:  RCALL  016E
....................       lcd_send_nibble(n & 0xf); 
01F8:  MOVF   4B,W
01FA:  ANDLW  0F
01FC:  MOVWF  4C
01FE:  MOVWF  4D
0200:  RCALL  016E
0202:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0204:  MOVLW  00
0206:  MOVWF  F95
....................     lcd.rs = 0; 
0208:  BCF    F83.0
....................     lcd.rw = 0; 
020A:  BCF    F83.1
....................     lcd.enable = 0; 
020C:  BCF    F83.2
....................     delay_ms(15); 
020E:  MOVLW  0F
0210:  MOVWF  46
0212:  RCALL  0146
....................     for(i=1;i<=3;++i) { 
0214:  MOVLW  01
0216:  MOVWF  22
0218:  MOVF   22,W
021A:  SUBLW  03
021C:  BNC   022E
....................        lcd_send_nibble(3); 
021E:  MOVLW  03
0220:  MOVWF  4D
0222:  RCALL  016E
....................        delay_ms(5); 
0224:  MOVLW  05
0226:  MOVWF  46
0228:  RCALL  0146
022A:  INCF   22,F
022C:  BRA    0218
....................     } 
....................     lcd_send_nibble(2); 
022E:  MOVLW  02
0230:  MOVWF  4D
0232:  RCALL  016E
....................     for(i=0;i<=3;++i) 
0234:  CLRF   22
0236:  MOVF   22,W
0238:  SUBLW  03
023A:  BNC   0258
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
023C:  CLRF   03
023E:  MOVF   22,W
0240:  MOVFF  FF2,23
0244:  BCF    FF2.7
0246:  RCALL  0004
0248:  BTFSC  23.7
024A:  BSF    FF2.7
024C:  MOVWF  23
024E:  CLRF   4A
0250:  MOVWF  4B
0252:  RCALL  01CE
0254:  INCF   22,F
0256:  BRA    0236
0258:  GOTO   21B0 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0264:  DECFSZ 47,W
0266:  BRA    026A
0268:  BRA    0270
....................      address=lcd_line_two; 
026A:  MOVLW  40
026C:  MOVWF  48
026E:  BRA    0272
....................    else 
....................      address=0; 
0270:  CLRF   48
....................    address+=x-1; 
0272:  MOVLW  01
0274:  SUBWF  46,W
0276:  ADDWF  48,F
....................    lcd_send_byte(0,0x80|address); 
0278:  MOVF   48,W
027A:  IORLW  80
027C:  MOVWF  49
027E:  CLRF   4A
0280:  MOVWF  4B
0282:  RCALL  01CE
0284:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
0286:  MOVF   45,W
0288:  XORLW  0C
028A:  BZ    0296
028C:  XORLW  06
028E:  BZ    02A6
0290:  XORLW  02
0292:  BZ    02B2
0294:  BRA    02BC
....................      case '\f'   : lcd_send_byte(0,1); 
0296:  CLRF   4A
0298:  MOVLW  01
029A:  MOVWF  4B
029C:  RCALL  01CE
....................                    delay_ms(2); 
029E:  MOVLW  02
02A0:  MOVWF  46
02A2:  RCALL  0146
....................                                            break; 
02A4:  BRA    02C6
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
02A6:  MOVLW  01
02A8:  MOVWF  46
02AA:  MOVLW  02
02AC:  MOVWF  47
02AE:  RCALL  0264
02B0:  BRA    02C6
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02B2:  CLRF   4A
02B4:  MOVLW  10
02B6:  MOVWF  4B
02B8:  RCALL  01CE
02BA:  BRA    02C6
....................      default     : lcd_send_byte(1,c);     break; 
02BC:  MOVLW  01
02BE:  MOVWF  4A
02C0:  MOVFF  45,4B
02C4:  RCALL  01CE
....................    } 
02C6:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... //endereços dos ports do 18f4550 
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
....................  
.................... //Entradas da Matriz 
.................... #bit linha1 = portb.4 
.................... #bit linha2 = portb.5 
.................... #bit linha3 = portb.6 
.................... #bit linha4 = portb.7 
....................  
.................... //Saidas da Matriz 
.................... #bit coluna1 = porta.1 
.................... #bit coluna2 = porta.2 
.................... #bit coluna3 = porta.3 
.................... //Saídas motores 
.................... #bit boba = porte.0 
.................... #bit bobb = porte.1 
.................... #bit bobc = porte.2 
.................... #bit bobd = portc.0 
....................  
....................  
.................... void telaInicial(void);			// Tela de apresentação. 
.................... void telaPolo(void);			// Permiti indicar com qual polo o telescopio esta alinhado. 
.................... void alinhamentoInicial(void);	// Força o usuário verificar o alinhamento inicial do telescópio antes de iniciar. 
.................... void menu(void);				// Permite escolher entre os modos de operação manual ou automático. 
.................... void manual(void);				// Permite posicionar o telescópio através das teclas de navegação da matriz de botões. 
.................... void automatico(void);			 
.................... void desabilitaMatriz(void);	// Bloqueia a leitura da matriz de botões. 
.................... int varreMatriz(void);			// Realiza varredura na matriz de botões retornando o valor da tecla pressionada. 
.................... int varreTecladoManual(void); 
.................... void motorAR_antih(int); 
.................... void motorAR_h(int); 
.................... int extraiDezena(int num); 
.................... int extraiUnidade(int num,int dezena); 
.................... void exibirAH(void); 
.................... void inverterAH(void); 
.................... void telaAcompanhamento(void); 
....................  
.................... //double vel_rotacao= 
....................  
.................... int leitura=0;		// Armazena o valor retornado pela leitura da matriz de botão. 
.................... int polo=0;			// Indica a qual polo celeste o telescopio esta alinhado: 1=Norte 2=Sul. 
.................... int vel=5;			// Velocidade de movimentação dos eixos. 
.................... char display='0';	// usado para converter inteiro em char para exibição no display. 
.................... double AH;			// Armazena o ângulo horário do telescópio. 
.................... double DEC;			// Armazena a declinação do telescópio. 
.................... double AH_obj;		// Armazena o ângulo horário do objeto.  
.................... double DEC_obj;		// Armazena a declinação do objeto.	  
....................  
.................... double passo_AH=0.16666667/PASSOS_MOTOR; 	// Define a variação do ângulo horário para cada passo do motor. 
.................... double passo_DEC=0.001953125;//4/PASSOS_MOTOR;		// Define a variação da declinação para cada passo do motor. 
....................  
.................... const double diaSideral=23+56/60+4/3600;				// Tempo  para uma estrela cruzar duas vezes consecultivas o meridiano local (em horas). 
.................... int velRotacao=292;//(diaSideral/(PASSOS_MOTOR*144))*3600000;	// Velocidade do movimento de compesação da rotação da terra. 
.................... int DEC_sentido = 1; 
....................  
....................  
.................... void main() 
*
214E:  CLRF   FF8
2150:  BCF    FD0.7
2152:  CLRF   04
2154:  CLRF   05
2156:  MOVLW  05
2158:  MOVWF  06
215A:  MOVLW  30
215C:  MOVWF  07
215E:  MOVLW  AB
2160:  MOVWF  1B
2162:  MOVLW  AA
2164:  MOVWF  1A
2166:  MOVLW  2A
2168:  MOVWF  19
216A:  MOVLW  71
216C:  MOVWF  18
216E:  CLRF   1F
2170:  CLRF   1E
2172:  CLRF   1D
2174:  MOVLW  76
2176:  MOVWF  1C
2178:  MOVLW  24
217A:  MOVWF  20
217C:  MOVLW  01
217E:  MOVWF  21
2180:  MOVF   FC1,W
2182:  ANDLW  C0
2184:  IORLW  0F
2186:  MOVWF  FC1
2188:  MOVLW  07
218A:  MOVWF  FB4
.................... { 
.................... 	port_b_pullups(TRUE); // pullup interno portb habilitado 
218C:  BCF    FF1.7
....................      
.................... 	//Define Pinos de entrada e saída 
.................... 	set_tris_a(0b11110001); 
218E:  MOVLW  F1
2190:  MOVWF  F92
....................     set_tris_b(0b11111111); 
2192:  MOVLW  FF
2194:  MOVWF  F93
....................     set_tris_c(0b11111110);          
2196:  MOVLW  FE
2198:  MOVWF  F94
....................     set_tris_d(0b11111111); 
219A:  MOVLW  FF
219C:  MOVWF  F95
....................     set_tris_e(0b00000000); 
219E:  MOVLW  00
21A0:  MOVWF  F96
....................  
.................... 	// zera todos os ports 
....................     porta=0;  
21A2:  CLRF   F80
....................     portb=0; 
21A4:  CLRF   F81
....................     portc=0; 
21A6:  CLRF   F82
....................     portd=0; 
21A8:  CLRF   F83
....................     porte=0; 
21AA:  CLRF   F84
....................      
....................     lcd_init(); 
21AC:  GOTO   0204
.................... 	desabilitaMatriz(); 
21B0:  CALL   025C
.................... 	telaInicial(); 
21B4:  GOTO   02E8
.................... 	telaPolo(); 
21B8:  GOTO   041E
.................... 	alinhamentoInicial(); 
21BC:  GOTO   051E
.................... 	 
.................... 	menu: 
.................... 	menu(); 
21C0:  BRA    208C
.................... 	telaAcompanhamento();	 
21C2:  BRA    2104
....................    	while(true) 
....................    	{ 
.................... 		motorAR_h(velRotacao); 
21C4:  MOVFF  20,2C
21C8:  CALL   11C0
.................... 		leitura=varreMatriz(); 
21CC:  CALL   034C
21D0:  MOVFF  01,04
.................... 		if(leitura==10) 
21D4:  MOVF   04,W
21D6:  SUBLW  0A
21D8:  BNZ   21DC
.................... 			goto menu; 
21DA:  BRA    21C0
21DC:  BRA    21C4
....................    	} 
.................... } 
....................  
21DE:  SLEEP 
....................  
.................... void telaInicial(void) 
*
02E8:  MOVLW  64
02EA:  MOVWF  22
.................... { 
.................... 	int t=100; 
.................... 	printf(lcd_putc,"\f"); 
02EC:  MOVLW  0C
02EE:  MOVWF  45
02F0:  RCALL  0286
....................     lcd_gotoxy (1,1); 
02F2:  MOVLW  01
02F4:  MOVWF  46
02F6:  MOVWF  47
02F8:  RCALL  0264
....................     printf(lcd_putc,"TelescopeControl"); 
02FA:  MOVLW  18
02FC:  MOVWF  FF6
02FE:  MOVLW  00
0300:  MOVWF  FF7
0302:  RCALL  02C8
....................     delay_ms(5); 
0304:  MOVLW  05
0306:  MOVWF  46
0308:  RCALL  0146
....................     lcd_gotoxy (4,2); 
030A:  MOVLW  04
030C:  MOVWF  46
030E:  MOVLW  02
0310:  MOVWF  47
0312:  RCALL  0264
....................     printf(lcd_putc,"Aguarde"); 
0314:  MOVLW  2A
0316:  MOVWF  FF6
0318:  MOVLW  00
031A:  MOVWF  FF7
031C:  RCALL  02C8
.................... 	delay_ms(t); 
031E:  MOVFF  22,46
0322:  RCALL  0146
.................... 	printf(lcd_putc,"."); 
0324:  MOVLW  2E
0326:  MOVWF  45
0328:  RCALL  0286
.................... 	delay_ms(t); 
032A:  MOVFF  22,46
032E:  RCALL  0146
.................... 	printf(lcd_putc,"."); 
0330:  MOVLW  2E
0332:  MOVWF  45
0334:  RCALL  0286
.................... 	delay_ms(t); 
0336:  MOVFF  22,46
033A:  RCALL  0146
.................... 	printf(lcd_putc,"."); 
033C:  MOVLW  2E
033E:  MOVWF  45
0340:  RCALL  0286
.................... 	delay_ms(t); 
0342:  MOVFF  22,46
0346:  RCALL  0146
0348:  GOTO   21B8 (RETURN)
.................... } 
....................  
.................... void telaPolo(void) 
.................... { 
.................... 	inicioPolo: 
....................  
.................... 	printf(lcd_putc,"\f"); 
*
041E:  MOVLW  0C
0420:  MOVWF  45
0422:  RCALL  0286
....................     lcd_gotoxy (1,1); 
0424:  MOVLW  01
0426:  MOVWF  46
0428:  MOVWF  47
042A:  RCALL  0264
....................     printf(lcd_putc,"Escolha um polo:"); 
042C:  MOVLW  32
042E:  MOVWF  FF6
0430:  MOVLW  00
0432:  MOVWF  FF7
0434:  RCALL  02C8
....................     delay_ms(5); 
0436:  MOVLW  05
0438:  MOVWF  46
043A:  RCALL  0146
....................     lcd_gotoxy (1,2); 
043C:  MOVLW  01
043E:  MOVWF  46
0440:  MOVLW  02
0442:  MOVWF  47
0444:  RCALL  0264
....................     printf(lcd_putc,"Norte(1)  Sul(2)"); 
0446:  MOVLW  44
0448:  MOVWF  FF6
044A:  MOVLW  00
044C:  MOVWF  FF7
044E:  RCALL  02C8
.................... 	delay_ms(5);	 
0450:  MOVLW  05
0452:  MOVWF  46
0454:  RCALL  0146
.................... 	 
.................... 	while(leitura!=1 && leitura!=2) 
0456:  DECFSZ 04,W
0458:  BRA    045C
045A:  BRA    0468
045C:  MOVF   04,W
045E:  SUBLW  02
0460:  BZ    0468
.................... 		leitura = 2;//varreMatriz(); 
0462:  MOVLW  02
0464:  MOVWF  04
0466:  BRA    0456
.................... 	 
.................... 	printf(lcd_putc,"\f"); 
0468:  MOVLW  0C
046A:  MOVWF  45
046C:  RCALL  0286
.................... 	lcd_gotoxy (1,1); 
046E:  MOVLW  01
0470:  MOVWF  46
0472:  MOVWF  47
0474:  RCALL  0264
....................     printf(lcd_putc," Confirmar polo "); 
0476:  MOVLW  56
0478:  MOVWF  FF6
047A:  MOVLW  00
047C:  MOVWF  FF7
047E:  RCALL  02C8
....................     delay_ms(5); 
0480:  MOVLW  05
0482:  MOVWF  46
0484:  RCALL  0146
.................... 	 
.................... 	if(leitura==1) 
0486:  DECFSZ 04,W
0488:  BRA    04C4
.................... 	{ 
.................... 		leitura=0; 
048A:  CLRF   04
.................... 	    lcd_gotoxy (1,2); 
048C:  MOVLW  01
048E:  MOVWF  46
0490:  MOVLW  02
0492:  MOVWF  47
0494:  RCALL  0264
.................... 	    printf(lcd_putc,"     Norte?     "); 
0496:  MOVLW  68
0498:  MOVWF  FF6
049A:  MOVLW  00
049C:  MOVWF  FF7
049E:  RCALL  02C8
.................... 		delay_ms(5); 
04A0:  MOVLW  05
04A2:  MOVWF  46
04A4:  RCALL  0146
.................... 		polo=1; 
04A6:  MOVLW  01
04A8:  MOVWF  05
.................... 		AH=18; 
04AA:  CLRF   0B
04AC:  CLRF   0A
04AE:  MOVLW  10
04B0:  MOVWF  09
04B2:  MOVLW  83
04B4:  MOVWF  08
.................... 		DEC=90; 
04B6:  CLRF   0F
04B8:  CLRF   0E
04BA:  MOVLW  34
04BC:  MOVWF  0D
04BE:  MOVLW  85
04C0:  MOVWF  0C
.................... 	}else{ 
04C2:  BRA    04FC
.................... 		leitura=0; 
04C4:  CLRF   04
.................... 	    lcd_gotoxy (1,2); 
04C6:  MOVLW  01
04C8:  MOVWF  46
04CA:  MOVLW  02
04CC:  MOVWF  47
04CE:  RCALL  0264
.................... 	    printf(lcd_putc,"      Sul?      "); 
04D0:  MOVLW  7A
04D2:  MOVWF  FF6
04D4:  MOVLW  00
04D6:  MOVWF  FF7
04D8:  RCALL  02C8
.................... 		delay_ms(5); 
04DA:  MOVLW  05
04DC:  MOVWF  46
04DE:  RCALL  0146
.................... 		polo=2; 
04E0:  MOVLW  02
04E2:  MOVWF  05
.................... 		AH=6; 
04E4:  CLRF   0B
04E6:  CLRF   0A
04E8:  MOVLW  40
04EA:  MOVWF  09
04EC:  MOVLW  81
04EE:  MOVWF  08
.................... 		DEC=-90; 
04F0:  CLRF   0F
04F2:  CLRF   0E
04F4:  MOVLW  B4
04F6:  MOVWF  0D
04F8:  MOVLW  85
04FA:  MOVWF  0C
.................... 	} 
....................  
.................... 	while(leitura!=10 && leitura!=11) 
04FC:  MOVF   04,W
04FE:  SUBLW  0A
0500:  BZ    0510
0502:  MOVF   04,W
0504:  SUBLW  0B
0506:  BZ    0510
.................... 		leitura = varreMatriz(); 
0508:  RCALL  034C
050A:  MOVFF  01,04
050E:  BRA    04FC
.................... 	if(leitura == 10) 
0510:  MOVF   04,W
0512:  SUBLW  0A
0514:  BNZ   0518
.................... 		goto inicioPolo; 
0516:  BRA    041E
....................  
.................... 	leitura = 0; 
0518:  CLRF   04
051A:  GOTO   21BC (RETURN)
.................... } 
....................  
.................... void alinhamentoInicial(void) 
.................... { 
.................... 	printf(lcd_putc,"\f"); 
051E:  MOVLW  0C
0520:  MOVWF  45
0522:  RCALL  0286
.................... 	lcd_gotoxy (1,1); 
0524:  MOVLW  01
0526:  MOVWF  46
0528:  MOVWF  47
052A:  RCALL  0264
....................     printf(lcd_putc,"Alinhamento  OK?"); 
052C:  MOVLW  8C
052E:  MOVWF  FF6
0530:  MOVLW  00
0532:  MOVWF  FF7
0534:  RCALL  02C8
....................     delay_ms(5); 
0536:  MOVLW  05
0538:  MOVWF  46
053A:  RCALL  0146
.................... 	if (polo==1) 
053C:  DECFSZ 05,W
053E:  BRA    055C
.................... 	{ 
.................... 		lcd_gotoxy (1,2); 
0540:  MOVLW  01
0542:  MOVWF  46
0544:  MOVLW  02
0546:  MOVWF  47
0548:  RCALL  0264
.................... 	    printf(lcd_putc,"AH=18h DEC=90deg"); 
054A:  MOVLW  9E
054C:  MOVWF  FF6
054E:  MOVLW  00
0550:  MOVWF  FF7
0552:  RCALL  02C8
.................... 		delay_ms(5); 
0554:  MOVLW  05
0556:  MOVWF  46
0558:  RCALL  0146
.................... 	} 
055A:  BRA    057C
.................... 	else if (polo==2) 
055C:  MOVF   05,W
055E:  SUBLW  02
0560:  BNZ   057C
.................... 	{ 
.................... 		lcd_gotoxy (1,2); 
0562:  MOVLW  01
0564:  MOVWF  46
0566:  MOVLW  02
0568:  MOVWF  47
056A:  RCALL  0264
.................... 	    printf(lcd_putc,"AH=6h DEC=-90deg"); 
056C:  MOVLW  B0
056E:  MOVWF  FF6
0570:  MOVLW  00
0572:  MOVWF  FF7
0574:  RCALL  02C8
.................... 		delay_ms(5); 
0576:  MOVLW  05
0578:  MOVWF  46
057A:  RCALL  0146
.................... 	} 
.................... 	while(leitura!=11) 
057C:  MOVF   04,W
057E:  SUBLW  0B
0580:  BZ    058A
.................... 		leitura=varreMatriz(); 
0582:  RCALL  034C
0584:  MOVFF  01,04
0588:  BRA    057C
....................  
.................... 	leitura=0; 
058A:  CLRF   04
058C:  GOTO   21C0 (RETURN)
.................... } 
....................  
.................... void menu(void) 
.................... { 
.................... 	printf(lcd_putc,"\f"); 
*
208C:  MOVLW  0C
208E:  MOVWF  45
2090:  CALL   0286
....................     lcd_gotoxy (1,1); 
2094:  MOVLW  01
2096:  MOVWF  46
2098:  MOVWF  47
209A:  CALL   0264
....................     printf(lcd_putc,"Escolha um modo:"); 
209E:  MOVLW  C2
20A0:  MOVWF  FF6
20A2:  MOVLW  00
20A4:  MOVWF  FF7
20A6:  CALL   02C8
....................     delay_ms(5); 
20AA:  MOVLW  05
20AC:  MOVWF  46
20AE:  CALL   0146
....................     lcd_gotoxy (1,2); 
20B2:  MOVLW  01
20B4:  MOVWF  46
20B6:  MOVLW  02
20B8:  MOVWF  47
20BA:  CALL   0264
....................     printf(lcd_putc,"Manual(1)Auto(2)"); 
20BE:  MOVLW  D4
20C0:  MOVWF  FF6
20C2:  MOVLW  00
20C4:  MOVWF  FF7
20C6:  CALL   02C8
.................... 	delay_ms(5); 
20CA:  MOVLW  05
20CC:  MOVWF  46
20CE:  CALL   0146
....................  
.................... 	while(leitura!=1 && leitura!=2) 
20D2:  DECFSZ 04,W
20D4:  BRA    20D8
20D6:  BRA    20E8
20D8:  MOVF   04,W
20DA:  SUBLW  02
20DC:  BZ    20E8
.................... 		leitura = varreMatriz(); 
20DE:  CALL   034C
20E2:  MOVFF  01,04
20E6:  BRA    20D2
....................  
.................... 	if(leitura==1) 
20E8:  DECFSZ 04,W
20EA:  BRA    20F4
.................... 	{ 
.................... 		leitura=0; 
20EC:  CLRF   04
.................... 		manual(); 
20EE:  GOTO   122E
.................... 	} 
20F2:  BRA    2100
.................... 	else if (leitura==2) 
20F4:  MOVF   04,W
20F6:  SUBLW  02
20F8:  BNZ   2100
.................... 	{ 
.................... 		leitura=0; 
20FA:  CLRF   04
.................... 		automatico(); 
20FC:  GOTO   16F8
.................... 	} 
2100:  GOTO   21C2 (RETURN)
.................... } 
....................  
.................... void manual(void) 
*
122E:  CLRF   22
.................... { 
.................... 	int cont=0; 
.................... 	exibirAH(); 
1230:  RCALL  0A40
.................... 	while(leitura!=10 && leitura!=11) 
1232:  MOVF   04,W
1234:  SUBLW  0A
1236:  BTFSC  FD8.2
1238:  BRA    1652
123A:  MOVF   04,W
123C:  SUBLW  0B
123E:  BTFSC  FD8.2
1240:  BRA    1652
.................... 	{ 
.................... 		leitura=varreTecladoManual(); 
1242:  BRA    10B0
1244:  MOVFF  01,04
.................... 		if(leitura==4) 
1248:  MOVF   04,W
124A:  SUBLW  04
124C:  BNZ   1300
.................... 		{ 
.................... 			if(AH<12) 
124E:  MOVFF  0B,46
1252:  MOVFF  0A,45
1256:  MOVFF  09,44
125A:  MOVFF  08,43
125E:  CLRF   4A
1260:  CLRF   49
1262:  MOVLW  40
1264:  MOVWF  48
1266:  MOVLW  82
1268:  MOVWF  47
126A:  CALL   09CA
126E:  BNC   1278
.................... 				motorAR_antih(vel); 
1270:  MOVFF  06,2C
1274:  RCALL  1152
1276:  BRA    127E
.................... 			else 
.................... 				motorAR_h(vel); 
1278:  MOVFF  06,2C
127C:  RCALL  11C0
.................... 			AH=AH-(passo_AH*4); 
127E:  MOVFF  1B,4A
1282:  MOVFF  1A,49
1286:  MOVFF  19,48
128A:  MOVFF  18,47
128E:  CLRF   4E
1290:  CLRF   4D
1292:  CLRF   4C
1294:  MOVLW  81
1296:  MOVWF  4B
1298:  CALL   0868
129C:  BSF    FD8.1
129E:  MOVFF  0B,4A
12A2:  MOVFF  0A,49
12A6:  MOVFF  09,48
12AA:  MOVFF  08,47
12AE:  MOVFF  03,4E
12B2:  MOVFF  02,4D
12B6:  MOVFF  01,4C
12BA:  MOVFF  00,4B
12BE:  CALL   05FE
12C2:  MOVFF  03,0B
12C6:  MOVFF  02,0A
12CA:  MOVFF  01,09
12CE:  MOVFF  00,08
.................... 			if(AH<0) 
12D2:  MOVFF  0B,46
12D6:  MOVFF  0A,45
12DA:  MOVFF  09,44
12DE:  MOVFF  08,43
12E2:  CLRF   4A
12E4:  CLRF   49
12E6:  CLRF   48
12E8:  CLRF   47
12EA:  CALL   09CA
12EE:  BNC   12FC
.................... 				AH=24; 
12F0:  CLRF   0B
12F2:  CLRF   0A
12F4:  MOVLW  40
12F6:  MOVWF  09
12F8:  MOVLW  83
12FA:  MOVWF  08
.................... 			exibirAH(); 
12FC:  CALL   0A40
.................... 		} 
.................... 		if(leitura==6) 
1300:  MOVF   04,W
1302:  SUBLW  06
1304:  BNZ   13B8
.................... 		{ 
.................... 			 
.................... 			if(AH<12) 
1306:  MOVFF  0B,46
130A:  MOVFF  0A,45
130E:  MOVFF  09,44
1312:  MOVFF  08,43
1316:  CLRF   4A
1318:  CLRF   49
131A:  MOVLW  40
131C:  MOVWF  48
131E:  MOVLW  82
1320:  MOVWF  47
1322:  CALL   09CA
1326:  BNC   1330
.................... 				motorAR_h(vel); 
1328:  MOVFF  06,2C
132C:  RCALL  11C0
132E:  BRA    1336
.................... 			else 
.................... 				motorAR_antih(vel); 
1330:  MOVFF  06,2C
1334:  RCALL  1152
.................... 			AH=AH+(passo_AH*4); 
1336:  MOVFF  1B,4A
133A:  MOVFF  1A,49
133E:  MOVFF  19,48
1342:  MOVFF  18,47
1346:  CLRF   4E
1348:  CLRF   4D
134A:  CLRF   4C
134C:  MOVLW  81
134E:  MOVWF  4B
1350:  CALL   0868
1354:  BCF    FD8.1
1356:  MOVFF  0B,4A
135A:  MOVFF  0A,49
135E:  MOVFF  09,48
1362:  MOVFF  08,47
1366:  MOVFF  03,4E
136A:  MOVFF  02,4D
136E:  MOVFF  01,4C
1372:  MOVFF  00,4B
1376:  CALL   05FE
137A:  MOVFF  03,0B
137E:  MOVFF  02,0A
1382:  MOVFF  01,09
1386:  MOVFF  00,08
.................... 			if(AH>24) 
138A:  CLRF   46
138C:  CLRF   45
138E:  MOVLW  40
1390:  MOVWF  44
1392:  MOVLW  83
1394:  MOVWF  43
1396:  MOVFF  0B,4A
139A:  MOVFF  0A,49
139E:  MOVFF  09,48
13A2:  MOVFF  08,47
13A6:  CALL   09CA
13AA:  BNC   13B4
.................... 				AH=0; 
13AC:  CLRF   0B
13AE:  CLRF   0A
13B0:  CLRF   09
13B2:  CLRF   08
.................... 			exibirAH();  
13B4:  CALL   0A40
.................... 		} 
.................... 		if(leitura==2) 
13B8:  MOVF   04,W
13BA:  SUBLW  02
13BC:  BTFSS  FD8.2
13BE:  BRA    1504
.................... 		{ 
.................... 			if(AH>12 && DEC>-90){ 
13C0:  CLRF   46
13C2:  CLRF   45
13C4:  MOVLW  40
13C6:  MOVWF  44
13C8:  MOVLW  82
13CA:  MOVWF  43
13CC:  MOVFF  0B,4A
13D0:  MOVFF  0A,49
13D4:  MOVFF  09,48
13D8:  MOVFF  08,47
13DC:  CALL   09CA
13E0:  BNC   1460
13E2:  CLRF   46
13E4:  CLRF   45
13E6:  MOVLW  B4
13E8:  MOVWF  44
13EA:  MOVLW  85
13EC:  MOVWF  43
13EE:  MOVFF  0F,4A
13F2:  MOVFF  0E,49
13F6:  MOVFF  0D,48
13FA:  MOVFF  0C,47
13FE:  CALL   09CA
1402:  BNC   1460
.................... 				DEC-=(passo_DEC*4); 
1404:  MOVFF  1F,4A
1408:  MOVFF  1E,49
140C:  MOVFF  1D,48
1410:  MOVFF  1C,47
1414:  CLRF   4E
1416:  CLRF   4D
1418:  CLRF   4C
141A:  MOVLW  81
141C:  MOVWF  4B
141E:  CALL   0868
1422:  BSF    FD8.1
1424:  MOVFF  0F,4A
1428:  MOVFF  0E,49
142C:  MOVFF  0D,48
1430:  MOVFF  0C,47
1434:  MOVFF  03,4E
1438:  MOVFF  02,4D
143C:  MOVFF  01,4C
1440:  MOVFF  00,4B
1444:  CALL   05FE
1448:  MOVFF  03,0F
144C:  MOVFF  02,0E
1450:  MOVFF  01,0D
1454:  MOVFF  00,0C
.................... 				motorAR_h(vel); // trocar por motorDEC_h 
1458:  MOVFF  06,2C
145C:  RCALL  11C0
.................... 			}else if (AH<=12 && DEC<90){ 
145E:  BRA    1500
1460:  MOVFF  0B,46
1464:  MOVFF  0A,45
1468:  MOVFF  09,44
146C:  MOVFF  08,43
1470:  CLRF   4A
1472:  CLRF   49
1474:  MOVLW  40
1476:  MOVWF  48
1478:  MOVLW  82
147A:  MOVWF  47
147C:  CALL   09CA
1480:  BC    1484
1482:  BNZ   1500
1484:  MOVFF  0F,46
1488:  MOVFF  0E,45
148C:  MOVFF  0D,44
1490:  MOVFF  0C,43
1494:  CLRF   4A
1496:  CLRF   49
1498:  MOVLW  34
149A:  MOVWF  48
149C:  MOVLW  85
149E:  MOVWF  47
14A0:  CALL   09CA
14A4:  BNC   1500
.................... 				DEC+=(passo_DEC*4); 
14A6:  MOVFF  1F,4A
14AA:  MOVFF  1E,49
14AE:  MOVFF  1D,48
14B2:  MOVFF  1C,47
14B6:  CLRF   4E
14B8:  CLRF   4D
14BA:  CLRF   4C
14BC:  MOVLW  81
14BE:  MOVWF  4B
14C0:  CALL   0868
14C4:  BCF    FD8.1
14C6:  MOVFF  0F,4A
14CA:  MOVFF  0E,49
14CE:  MOVFF  0D,48
14D2:  MOVFF  0C,47
14D6:  MOVFF  03,4E
14DA:  MOVFF  02,4D
14DE:  MOVFF  01,4C
14E2:  MOVFF  00,4B
14E6:  CALL   05FE
14EA:  MOVFF  03,0F
14EE:  MOVFF  02,0E
14F2:  MOVFF  01,0D
14F6:  MOVFF  00,0C
.................... 				motorAR_h(vel); // trocar por motorDEC_h 
14FA:  MOVFF  06,2C
14FE:  RCALL  11C0
.................... 			} 
.................... 			exibirAH(); 
1500:  CALL   0A40
.................... 		} 
.................... 		if(leitura==8) 
1504:  MOVF   04,W
1506:  SUBLW  08
1508:  BTFSS  FD8.2
150A:  BRA    1650
.................... 		{ 
.................... 			if(AH>12 && DEC<90){ 
150C:  CLRF   46
150E:  CLRF   45
1510:  MOVLW  40
1512:  MOVWF  44
1514:  MOVLW  82
1516:  MOVWF  43
1518:  MOVFF  0B,4A
151C:  MOVFF  0A,49
1520:  MOVFF  09,48
1524:  MOVFF  08,47
1528:  CALL   09CA
152C:  BNC   15AC
152E:  MOVFF  0F,46
1532:  MOVFF  0E,45
1536:  MOVFF  0D,44
153A:  MOVFF  0C,43
153E:  CLRF   4A
1540:  CLRF   49
1542:  MOVLW  34
1544:  MOVWF  48
1546:  MOVLW  85
1548:  MOVWF  47
154A:  CALL   09CA
154E:  BNC   15AC
.................... 				DEC+=(passo_DEC*4); 
1550:  MOVFF  1F,4A
1554:  MOVFF  1E,49
1558:  MOVFF  1D,48
155C:  MOVFF  1C,47
1560:  CLRF   4E
1562:  CLRF   4D
1564:  CLRF   4C
1566:  MOVLW  81
1568:  MOVWF  4B
156A:  CALL   0868
156E:  BCF    FD8.1
1570:  MOVFF  0F,4A
1574:  MOVFF  0E,49
1578:  MOVFF  0D,48
157C:  MOVFF  0C,47
1580:  MOVFF  03,4E
1584:  MOVFF  02,4D
1588:  MOVFF  01,4C
158C:  MOVFF  00,4B
1590:  CALL   05FE
1594:  MOVFF  03,0F
1598:  MOVFF  02,0E
159C:  MOVFF  01,0D
15A0:  MOVFF  00,0C
.................... 				motorAR_antih(vel); // trocar por motorDEC_antih 
15A4:  MOVFF  06,2C
15A8:  RCALL  1152
.................... 			}else if (AH<=12 && DEC>-90){ 
15AA:  BRA    164C
15AC:  MOVFF  0B,46
15B0:  MOVFF  0A,45
15B4:  MOVFF  09,44
15B8:  MOVFF  08,43
15BC:  CLRF   4A
15BE:  CLRF   49
15C0:  MOVLW  40
15C2:  MOVWF  48
15C4:  MOVLW  82
15C6:  MOVWF  47
15C8:  CALL   09CA
15CC:  BC    15D0
15CE:  BNZ   164C
15D0:  CLRF   46
15D2:  CLRF   45
15D4:  MOVLW  B4
15D6:  MOVWF  44
15D8:  MOVLW  85
15DA:  MOVWF  43
15DC:  MOVFF  0F,4A
15E0:  MOVFF  0E,49
15E4:  MOVFF  0D,48
15E8:  MOVFF  0C,47
15EC:  CALL   09CA
15F0:  BNC   164C
.................... 				DEC-=(passo_DEC*4); 
15F2:  MOVFF  1F,4A
15F6:  MOVFF  1E,49
15FA:  MOVFF  1D,48
15FE:  MOVFF  1C,47
1602:  CLRF   4E
1604:  CLRF   4D
1606:  CLRF   4C
1608:  MOVLW  81
160A:  MOVWF  4B
160C:  CALL   0868
1610:  BSF    FD8.1
1612:  MOVFF  0F,4A
1616:  MOVFF  0E,49
161A:  MOVFF  0D,48
161E:  MOVFF  0C,47
1622:  MOVFF  03,4E
1626:  MOVFF  02,4D
162A:  MOVFF  01,4C
162E:  MOVFF  00,4B
1632:  CALL   05FE
1636:  MOVFF  03,0F
163A:  MOVFF  02,0E
163E:  MOVFF  01,0D
1642:  MOVFF  00,0C
.................... 				motorAR_antih(vel); // trocar por motorDEC_antih 
1646:  MOVFF  06,2C
164A:  RCALL  1152
.................... 			} 
.................... 			exibirAH(); 
164C:  CALL   0A40
.................... 		} 
1650:  BRA    1232
.................... 	} 
1652:  GOTO   20F2 (RETURN)
.................... } 
....................  
.................... void telaAcompanhamento(void) 
.................... { 
.................... 	printf(lcd_putc,"\f"); 
*
2104:  MOVLW  0C
2106:  MOVWF  45
2108:  CALL   0286
....................     lcd_gotoxy (1,1); 
210C:  MOVLW  01
210E:  MOVWF  46
2110:  MOVWF  47
2112:  CALL   0264
....................     printf(lcd_putc," Acompanhamento "); 
2116:  MOVLW  E6
2118:  MOVWF  FF6
211A:  MOVLW  00
211C:  MOVWF  FF7
211E:  CALL   02C8
....................     delay_ms(5); 
2122:  MOVLW  05
2124:  MOVWF  46
2126:  CALL   0146
....................     lcd_gotoxy (1,2); 
212A:  MOVLW  01
212C:  MOVWF  46
212E:  MOVLW  02
2130:  MOVWF  47
2132:  CALL   0264
....................     printf(lcd_putc,"     ligado     "); 
2136:  MOVLW  F8
2138:  MOVWF  FF6
213A:  MOVLW  00
213C:  MOVWF  FF7
213E:  CALL   02C8
....................     delay_ms(5); 
2142:  MOVLW  05
2144:  MOVWF  46
2146:  CALL   0146
214A:  GOTO   21C4 (RETURN)
.................... } 
....................  
.................... void inverterAH(void) 
.................... { 
.................... 	if(AH<12) 
*
1026:  MOVFF  0B,46
102A:  MOVFF  0A,45
102E:  MOVFF  09,44
1032:  MOVFF  08,43
1036:  CLRF   4A
1038:  CLRF   49
103A:  MOVLW  40
103C:  MOVWF  48
103E:  MOVLW  82
1040:  MOVWF  47
1042:  RCALL  09CA
1044:  BNC   107A
.................... 		AH+=12; 
1046:  BCF    FD8.1
1048:  MOVFF  0B,4A
104C:  MOVFF  0A,49
1050:  MOVFF  09,48
1054:  MOVFF  08,47
1058:  CLRF   4E
105A:  CLRF   4D
105C:  MOVLW  40
105E:  MOVWF  4C
1060:  MOVLW  82
1062:  MOVWF  4B
1064:  CALL   05FE
1068:  MOVFF  03,0B
106C:  MOVFF  02,0A
1070:  MOVFF  01,09
1074:  MOVFF  00,08
1078:  BRA    10AC
.................... 	else 
.................... 		AH-=12; 
107A:  BSF    FD8.1
107C:  MOVFF  0B,4A
1080:  MOVFF  0A,49
1084:  MOVFF  09,48
1088:  MOVFF  08,47
108C:  CLRF   4E
108E:  CLRF   4D
1090:  MOVLW  40
1092:  MOVWF  4C
1094:  MOVLW  82
1096:  MOVWF  4B
1098:  CALL   05FE
109C:  MOVFF  03,0B
10A0:  MOVFF  02,0A
10A4:  MOVFF  01,09
10A8:  MOVFF  00,08
10AC:  GOTO   110E (RETURN)
.................... } 
....................  
.................... void exibirAH(void) 
.................... { 
.................... 	int h,m,s,dh,uh,dm,um,ds,us,t; 
.................... 	int dd,ud,decd,cd,md; 
.................... 	double temp,temp2; 
....................  
.................... 	t=1; 
*
0A40:  MOVLW  01
0A42:  MOVWF  35
....................  
.................... 	h=AH; 
0A44:  MOVFF  0B,48
0A48:  MOVFF  0A,47
0A4C:  MOVFF  09,46
0A50:  MOVFF  08,45
0A54:  RCALL  0590
0A56:  MOVFF  01,2C
.................... 	temp=(AH-h)*60;  
0A5A:  CLRF   48
0A5C:  MOVFF  2C,47
0A60:  RCALL  05C8
0A62:  BSF    FD8.1
0A64:  MOVFF  0B,4A
0A68:  MOVFF  0A,49
0A6C:  MOVFF  09,48
0A70:  MOVFF  08,47
0A74:  MOVFF  03,4E
0A78:  MOVFF  02,4D
0A7C:  MOVFF  01,4C
0A80:  MOVFF  00,4B
0A84:  RCALL  05FE
0A86:  MOVFF  03,46
0A8A:  MOVFF  02,45
0A8E:  MOVFF  01,44
0A92:  MOVFF  00,43
0A96:  MOVFF  03,4A
0A9A:  MOVFF  02,49
0A9E:  MOVFF  01,48
0AA2:  MOVFF  00,47
0AA6:  CLRF   4E
0AA8:  CLRF   4D
0AAA:  MOVLW  70
0AAC:  MOVWF  4C
0AAE:  MOVLW  84
0AB0:  MOVWF  4B
0AB2:  RCALL  0868
0AB4:  MOVFF  03,3E
0AB8:  MOVFF  02,3D
0ABC:  MOVFF  01,3C
0AC0:  MOVFF  00,3B
.................... 	m=temp; 
0AC4:  MOVFF  3E,48
0AC8:  MOVFF  3D,47
0ACC:  MOVFF  3C,46
0AD0:  MOVFF  3B,45
0AD4:  RCALL  0590
0AD6:  MOVFF  01,2D
.................... 	s=(temp-m)*60; 
0ADA:  CLRF   48
0ADC:  MOVFF  2D,47
0AE0:  RCALL  05C8
0AE2:  BSF    FD8.1
0AE4:  MOVFF  3E,4A
0AE8:  MOVFF  3D,49
0AEC:  MOVFF  3C,48
0AF0:  MOVFF  3B,47
0AF4:  MOVFF  03,4E
0AF8:  MOVFF  02,4D
0AFC:  MOVFF  01,4C
0B00:  MOVFF  00,4B
0B04:  RCALL  05FE
0B06:  MOVFF  03,46
0B0A:  MOVFF  02,45
0B0E:  MOVFF  01,44
0B12:  MOVFF  00,43
0B16:  MOVFF  03,4A
0B1A:  MOVFF  02,49
0B1E:  MOVFF  01,48
0B22:  MOVFF  00,47
0B26:  CLRF   4E
0B28:  CLRF   4D
0B2A:  MOVLW  70
0B2C:  MOVWF  4C
0B2E:  MOVLW  84
0B30:  MOVWF  4B
0B32:  RCALL  0868
0B34:  MOVFF  03,48
0B38:  MOVFF  02,47
0B3C:  MOVFF  01,46
0B40:  MOVFF  00,45
0B44:  RCALL  0590
0B46:  MOVFF  01,2E
....................  
.................... 	dh=extraiDezena(h); 
0B4A:  MOVFF  2C,44
0B4E:  RCALL  095A
0B50:  MOVFF  01,2F
.................... 	uh=extraiUnidade(h,dh); 
0B54:  MOVFF  2C,44
0B58:  MOVFF  2F,45
0B5C:  RCALL  099A
0B5E:  MOVFF  01,30
.................... 	dm=extraiDezena(m); 
0B62:  MOVFF  2D,44
0B66:  RCALL  095A
0B68:  MOVFF  01,31
.................... 	um=extraiUnidade(m,dm); 
0B6C:  MOVFF  2D,44
0B70:  MOVFF  31,45
0B74:  RCALL  099A
0B76:  MOVFF  01,32
.................... 	ds=extraiDezena(s); 
0B7A:  MOVFF  2E,44
0B7E:  RCALL  095A
0B80:  MOVFF  01,33
.................... 	us=extraiUnidade(s,ds); 
0B84:  MOVFF  2E,44
0B88:  MOVFF  33,45
0B8C:  RCALL  099A
0B8E:  MOVFF  01,34
.................... 	 
.................... 	printf(lcd_putc,"\f"); 
0B92:  MOVLW  0C
0B94:  MOVWF  45
0B96:  CALL   0286
....................     lcd_gotoxy (1,1); 
0B9A:  MOVLW  01
0B9C:  MOVWF  46
0B9E:  MOVWF  47
0BA0:  CALL   0264
....................     printf(lcd_putc,"AH="); 
0BA4:  MOVLW  0A
0BA6:  MOVWF  FF6
0BA8:  MOVLW  01
0BAA:  MOVWF  FF7
0BAC:  CALL   02C8
....................     delay_ms(t); 
0BB0:  MOVFF  35,46
0BB4:  CALL   0146
.................... 	lcd_gotoxy (4,1);	 
0BB8:  MOVLW  04
0BBA:  MOVWF  46
0BBC:  MOVLW  01
0BBE:  MOVWF  47
0BC0:  CALL   0264
.................... 	display=dh+'0'; 
0BC4:  MOVLW  30
0BC6:  ADDWF  2F,W
0BC8:  MOVWF  07
....................     printf(lcd_putc,&display); 
0BCA:  CLRF   FEA
0BCC:  MOVLW  07
0BCE:  MOVWF  FE9
0BD0:  RCALL  09A6
.................... 	delay_ms(t); 
0BD2:  MOVFF  35,46
0BD6:  CALL   0146
.................... 	lcd_gotoxy (5,1); 
0BDA:  MOVLW  05
0BDC:  MOVWF  46
0BDE:  MOVLW  01
0BE0:  MOVWF  47
0BE2:  CALL   0264
.................... 	display=uh+'0'; 
0BE6:  MOVLW  30
0BE8:  ADDWF  30,W
0BEA:  MOVWF  07
....................     printf(lcd_putc,&display); 
0BEC:  CLRF   FEA
0BEE:  MOVLW  07
0BF0:  MOVWF  FE9
0BF2:  RCALL  09A6
.................... 	delay_ms(t); 
0BF4:  MOVFF  35,46
0BF8:  CALL   0146
.................... 	lcd_gotoxy (6,1); 
0BFC:  MOVLW  06
0BFE:  MOVWF  46
0C00:  MOVLW  01
0C02:  MOVWF  47
0C04:  CALL   0264
.................... 	printf(lcd_putc,"h"); 
0C08:  MOVLW  68
0C0A:  MOVWF  45
0C0C:  CALL   0286
.................... 	delay_ms(t); 
0C10:  MOVFF  35,46
0C14:  CALL   0146
.................... 	lcd_gotoxy (7,1); 
0C18:  MOVLW  07
0C1A:  MOVWF  46
0C1C:  MOVLW  01
0C1E:  MOVWF  47
0C20:  CALL   0264
.................... 	display=dm+'0'; 
0C24:  MOVLW  30
0C26:  ADDWF  31,W
0C28:  MOVWF  07
....................     printf(lcd_putc,&display); 
0C2A:  CLRF   FEA
0C2C:  MOVLW  07
0C2E:  MOVWF  FE9
0C30:  RCALL  09A6
.................... 	delay_ms(t); 
0C32:  MOVFF  35,46
0C36:  CALL   0146
.................... 	lcd_gotoxy (8,1); 
0C3A:  MOVLW  08
0C3C:  MOVWF  46
0C3E:  MOVLW  01
0C40:  MOVWF  47
0C42:  CALL   0264
.................... 	display=um+'0'; 
0C46:  MOVLW  30
0C48:  ADDWF  32,W
0C4A:  MOVWF  07
....................     printf(lcd_putc,&display); 
0C4C:  CLRF   FEA
0C4E:  MOVLW  07
0C50:  MOVWF  FE9
0C52:  RCALL  09A6
.................... 	delay_ms(t); 
0C54:  MOVFF  35,46
0C58:  CALL   0146
.................... 	lcd_gotoxy (9,1); 
0C5C:  MOVLW  09
0C5E:  MOVWF  46
0C60:  MOVLW  01
0C62:  MOVWF  47
0C64:  CALL   0264
.................... 	printf(lcd_putc,"m"); 
0C68:  MOVLW  6D
0C6A:  MOVWF  45
0C6C:  CALL   0286
.................... 	delay_ms(t); 
0C70:  MOVFF  35,46
0C74:  CALL   0146
.................... 	lcd_gotoxy (10,1); 
0C78:  MOVLW  0A
0C7A:  MOVWF  46
0C7C:  MOVLW  01
0C7E:  MOVWF  47
0C80:  CALL   0264
.................... 	display=ds+'0'; 
0C84:  MOVLW  30
0C86:  ADDWF  33,W
0C88:  MOVWF  07
....................     printf(lcd_putc,&display); 
0C8A:  CLRF   FEA
0C8C:  MOVLW  07
0C8E:  MOVWF  FE9
0C90:  RCALL  09A6
.................... 	delay_ms(t); 
0C92:  MOVFF  35,46
0C96:  CALL   0146
.................... 	lcd_gotoxy (11,1); 
0C9A:  MOVLW  0B
0C9C:  MOVWF  46
0C9E:  MOVLW  01
0CA0:  MOVWF  47
0CA2:  CALL   0264
.................... 	display=us+'0'; 
0CA6:  MOVLW  30
0CA8:  ADDWF  34,W
0CAA:  MOVWF  07
....................     printf(lcd_putc,&display); 
0CAC:  CLRF   FEA
0CAE:  MOVLW  07
0CB0:  MOVWF  FE9
0CB2:  RCALL  09A6
.................... 	delay_ms(t); 
0CB4:  MOVFF  35,46
0CB8:  CALL   0146
.................... 	lcd_gotoxy (12,1); 
0CBC:  MOVLW  0C
0CBE:  MOVWF  46
0CC0:  MOVLW  01
0CC2:  MOVWF  47
0CC4:  CALL   0264
.................... 	printf(lcd_putc,"s    "); 
0CC8:  MOVLW  0E
0CCA:  MOVWF  FF6
0CCC:  MOVLW  01
0CCE:  MOVWF  FF7
0CD0:  CALL   02C8
.................... 	delay_ms(t); 
0CD4:  MOVFF  35,46
0CD8:  CALL   0146
....................  
.................... 	if(DEC<0)temp2=DEC*-1; 
0CDC:  MOVFF  0F,46
0CE0:  MOVFF  0E,45
0CE4:  MOVFF  0D,44
0CE8:  MOVFF  0C,43
0CEC:  CLRF   4A
0CEE:  CLRF   49
0CF0:  CLRF   48
0CF2:  CLRF   47
0CF4:  RCALL  09CA
0CF6:  BNC   0D28
0CF8:  MOVFF  0F,4A
0CFC:  MOVFF  0E,49
0D00:  MOVFF  0D,48
0D04:  MOVFF  0C,47
0D08:  CLRF   4E
0D0A:  CLRF   4D
0D0C:  MOVLW  80
0D0E:  MOVWF  4C
0D10:  MOVLW  7F
0D12:  MOVWF  4B
0D14:  RCALL  0868
0D16:  MOVFF  03,42
0D1A:  MOVFF  02,41
0D1E:  MOVFF  01,40
0D22:  MOVFF  00,3F
0D26:  BRA    0D38
.................... 	else temp2=DEC; 
0D28:  MOVFF  0F,42
0D2C:  MOVFF  0E,41
0D30:  MOVFF  0D,40
0D34:  MOVFF  0C,3F
....................  
.................... 	dd=extraiDezena(temp2); 
0D38:  MOVFF  42,48
0D3C:  MOVFF  41,47
0D40:  MOVFF  40,46
0D44:  MOVFF  3F,45
0D48:  RCALL  0590
0D4A:  MOVFF  01,43
0D4E:  MOVFF  01,44
0D52:  RCALL  095A
0D54:  MOVFF  01,36
.................... 	ud=extraiUnidade(temp2,dd); 
0D58:  MOVFF  42,48
0D5C:  MOVFF  41,47
0D60:  MOVFF  40,46
0D64:  MOVFF  3F,45
0D68:  RCALL  0590
0D6A:  MOVFF  01,43
0D6E:  MOVFF  01,44
0D72:  MOVFF  36,45
0D76:  RCALL  099A
0D78:  MOVFF  01,37
.................... 	temp=temp2-(dd*10+ud); 
0D7C:  MOVF   36,W
0D7E:  MULLW  0A
0D80:  MOVF   FF3,W
0D82:  ADDWF  37,W
0D84:  CLRF   48
0D86:  MOVWF  47
0D88:  RCALL  05C8
0D8A:  BSF    FD8.1
0D8C:  MOVFF  42,4A
0D90:  MOVFF  41,49
0D94:  MOVFF  40,48
0D98:  MOVFF  3F,47
0D9C:  MOVFF  03,4E
0DA0:  MOVFF  02,4D
0DA4:  MOVFF  01,4C
0DA8:  MOVFF  00,4B
0DAC:  RCALL  05FE
0DAE:  MOVFF  03,3E
0DB2:  MOVFF  02,3D
0DB6:  MOVFF  01,3C
0DBA:  MOVFF  00,3B
.................... 	decd=temp*10; 
0DBE:  MOVFF  3E,4A
0DC2:  MOVFF  3D,49
0DC6:  MOVFF  3C,48
0DCA:  MOVFF  3B,47
0DCE:  CLRF   4E
0DD0:  CLRF   4D
0DD2:  MOVLW  20
0DD4:  MOVWF  4C
0DD6:  MOVLW  82
0DD8:  MOVWF  4B
0DDA:  RCALL  0868
0DDC:  MOVFF  03,48
0DE0:  MOVFF  02,47
0DE4:  MOVFF  01,46
0DE8:  MOVFF  00,45
0DEC:  CALL   0590
0DF0:  MOVFF  01,38
.................... 	cd=temp*100-decd*10; 
0DF4:  MOVFF  3E,4A
0DF8:  MOVFF  3D,49
0DFC:  MOVFF  3C,48
0E00:  MOVFF  3B,47
0E04:  CLRF   4E
0E06:  CLRF   4D
0E08:  MOVLW  48
0E0A:  MOVWF  4C
0E0C:  MOVLW  85
0E0E:  MOVWF  4B
0E10:  RCALL  0868
0E12:  MOVFF  03,46
0E16:  MOVFF  02,45
0E1A:  MOVFF  01,44
0E1E:  MOVFF  00,43
0E22:  MOVF   38,W
0E24:  MULLW  0A
0E26:  MOVF   FF3,W
0E28:  CLRF   48
0E2A:  MOVWF  47
0E2C:  CALL   05C8
0E30:  BSF    FD8.1
0E32:  MOVFF  46,4A
0E36:  MOVFF  45,49
0E3A:  MOVFF  44,48
0E3E:  MOVFF  43,47
0E42:  MOVFF  03,4E
0E46:  MOVFF  02,4D
0E4A:  MOVFF  01,4C
0E4E:  MOVFF  00,4B
0E52:  CALL   05FE
0E56:  MOVFF  03,48
0E5A:  MOVFF  02,47
0E5E:  MOVFF  01,46
0E62:  MOVFF  00,45
0E66:  CALL   0590
0E6A:  MOVFF  01,39
.................... 	md=temp*1000-(decd*100+cd*10); 
0E6E:  MOVFF  3E,4A
0E72:  MOVFF  3D,49
0E76:  MOVFF  3C,48
0E7A:  MOVFF  3B,47
0E7E:  CLRF   4E
0E80:  CLRF   4D
0E82:  MOVLW  7A
0E84:  MOVWF  4C
0E86:  MOVLW  88
0E88:  MOVWF  4B
0E8A:  RCALL  0868
0E8C:  MOVFF  03,46
0E90:  MOVFF  02,45
0E94:  MOVFF  01,44
0E98:  MOVFF  00,43
0E9C:  MOVF   38,W
0E9E:  MULLW  64
0EA0:  MOVFF  FF3,47
0EA4:  MOVF   39,W
0EA6:  MULLW  0A
0EA8:  MOVF   FF3,W
0EAA:  ADDWF  47,W
0EAC:  CLRF   48
0EAE:  MOVWF  47
0EB0:  CALL   05C8
0EB4:  BSF    FD8.1
0EB6:  MOVFF  46,4A
0EBA:  MOVFF  45,49
0EBE:  MOVFF  44,48
0EC2:  MOVFF  43,47
0EC6:  MOVFF  03,4E
0ECA:  MOVFF  02,4D
0ECE:  MOVFF  01,4C
0ED2:  MOVFF  00,4B
0ED6:  CALL   05FE
0EDA:  MOVFF  03,48
0EDE:  MOVFF  02,47
0EE2:  MOVFF  01,46
0EE6:  MOVFF  00,45
0EEA:  CALL   0590
0EEE:  MOVFF  01,3A
....................  
.................... 	lcd_gotoxy (1,2); 
0EF2:  MOVLW  01
0EF4:  MOVWF  46
0EF6:  MOVLW  02
0EF8:  MOVWF  47
0EFA:  CALL   0264
.................... 	if(DEC>=0) 
0EFE:  CLRF   46
0F00:  CLRF   45
0F02:  CLRF   44
0F04:  CLRF   43
0F06:  MOVFF  0F,4A
0F0A:  MOVFF  0E,49
0F0E:  MOVFF  0D,48
0F12:  MOVFF  0C,47
0F16:  RCALL  09CA
0F18:  BC    0F1C
0F1A:  BNZ   0F2A
....................     	printf(lcd_putc,"DEC=+"); 
0F1C:  MOVLW  14
0F1E:  MOVWF  FF6
0F20:  MOVLW  01
0F22:  MOVWF  FF7
0F24:  CALL   02C8
0F28:  BRA    0F36
.................... 	else 
....................     	printf(lcd_putc,"DEC=-"); 
0F2A:  MOVLW  1A
0F2C:  MOVWF  FF6
0F2E:  MOVLW  01
0F30:  MOVWF  FF7
0F32:  CALL   02C8
....................     delay_ms(t); 
0F36:  MOVFF  35,46
0F3A:  CALL   0146
.................... 	lcd_gotoxy (6,2);	 
0F3E:  MOVLW  06
0F40:  MOVWF  46
0F42:  MOVLW  02
0F44:  MOVWF  47
0F46:  CALL   0264
.................... 	display=dd+'0'; 
0F4A:  MOVLW  30
0F4C:  ADDWF  36,W
0F4E:  MOVWF  07
....................     printf(lcd_putc,&display); 
0F50:  CLRF   FEA
0F52:  MOVLW  07
0F54:  MOVWF  FE9
0F56:  RCALL  09A6
.................... 	delay_ms(t); 
0F58:  MOVFF  35,46
0F5C:  CALL   0146
.................... 	lcd_gotoxy (7,2);	 
0F60:  MOVLW  07
0F62:  MOVWF  46
0F64:  MOVLW  02
0F66:  MOVWF  47
0F68:  CALL   0264
.................... 	display=ud+'0'; 
0F6C:  MOVLW  30
0F6E:  ADDWF  37,W
0F70:  MOVWF  07
....................     printf(lcd_putc,&display); 
0F72:  CLRF   FEA
0F74:  MOVLW  07
0F76:  MOVWF  FE9
0F78:  RCALL  09A6
.................... 	delay_ms(t); 
0F7A:  MOVFF  35,46
0F7E:  CALL   0146
.................... 	lcd_gotoxy (8,2);	 
0F82:  MOVLW  08
0F84:  MOVWF  46
0F86:  MOVLW  02
0F88:  MOVWF  47
0F8A:  CALL   0264
....................     printf(lcd_putc,"."); 
0F8E:  MOVLW  2E
0F90:  MOVWF  45
0F92:  CALL   0286
.................... 	delay_ms(t); 
0F96:  MOVFF  35,46
0F9A:  CALL   0146
.................... 	lcd_gotoxy (9,2);	 
0F9E:  MOVLW  09
0FA0:  MOVWF  46
0FA2:  MOVLW  02
0FA4:  MOVWF  47
0FA6:  CALL   0264
.................... 	display=decd+'0'; 
0FAA:  MOVLW  30
0FAC:  ADDWF  38,W
0FAE:  MOVWF  07
....................     printf(lcd_putc,&display); 
0FB0:  CLRF   FEA
0FB2:  MOVLW  07
0FB4:  MOVWF  FE9
0FB6:  RCALL  09A6
.................... 	delay_ms(t); 
0FB8:  MOVFF  35,46
0FBC:  CALL   0146
.................... 	lcd_gotoxy (10,2);	 
0FC0:  MOVLW  0A
0FC2:  MOVWF  46
0FC4:  MOVLW  02
0FC6:  MOVWF  47
0FC8:  CALL   0264
.................... 	display=cd+'0'; 
0FCC:  MOVLW  30
0FCE:  ADDWF  39,W
0FD0:  MOVWF  07
....................     printf(lcd_putc,&display); 
0FD2:  CLRF   FEA
0FD4:  MOVLW  07
0FD6:  MOVWF  FE9
0FD8:  RCALL  09A6
.................... 	delay_ms(t); 
0FDA:  MOVFF  35,46
0FDE:  CALL   0146
.................... 	lcd_gotoxy (11,2);	 
0FE2:  MOVLW  0B
0FE4:  MOVWF  46
0FE6:  MOVLW  02
0FE8:  MOVWF  47
0FEA:  CALL   0264
.................... 	display=md+'0'; 
0FEE:  MOVLW  30
0FF0:  ADDWF  3A,W
0FF2:  MOVWF  07
....................     printf(lcd_putc,&display); 
0FF4:  CLRF   FEA
0FF6:  MOVLW  07
0FF8:  MOVWF  FE9
0FFA:  RCALL  09A6
.................... 	delay_ms(t); 
0FFC:  MOVFF  35,46
1000:  CALL   0146
.................... 	lcd_gotoxy (12,2);	 
1004:  MOVLW  0C
1006:  MOVWF  46
1008:  MOVLW  02
100A:  MOVWF  47
100C:  CALL   0264
....................     printf(lcd_putc,"deg "); 
1010:  MOVLW  20
1012:  MOVWF  FF6
1014:  MOVLW  01
1016:  MOVWF  FF7
1018:  CALL   02C8
.................... 	delay_ms(t);	  
101C:  MOVFF  35,46
1020:  CALL   0146
1024:  RETURN 0
.................... } 
....................  
.................... int extraiDezena(int num) 
.................... { 
.................... 	return num*0.1; 
*
095A:  CLRF   48
095C:  MOVFF  44,47
0960:  RCALL  05C8
0962:  MOVFF  03,4A
0966:  MOVFF  02,49
096A:  MOVFF  01,48
096E:  MOVFF  00,47
0972:  MOVLW  CD
0974:  MOVWF  4E
0976:  MOVLW  CC
0978:  MOVWF  4D
097A:  MOVLW  4C
097C:  MOVWF  4C
097E:  MOVLW  7B
0980:  MOVWF  4B
0982:  RCALL  0868
0984:  MOVFF  03,48
0988:  MOVFF  02,47
098C:  MOVFF  01,46
0990:  MOVFF  00,45
0994:  RCALL  0590
0996:  MOVF   01,W
0998:  RETURN 0
.................... } 
....................  
.................... int extraiUnidade(int num,int dezena) 
.................... { 
.................... 	return num -(dezena*10); 
099A:  MOVF   45,W
099C:  MULLW  0A
099E:  MOVF   FF3,W
09A0:  SUBWF  44,W
09A2:  MOVWF  01
09A4:  RETURN 0
.................... } 
....................  
.................... int receberNum(void) 
.................... { 
.................... 	leitura=12; 
*
1656:  MOVLW  0C
1658:  MOVWF  04
.................... 	while(leitura==12) 
165A:  MOVF   04,W
165C:  SUBLW  0C
165E:  BNZ   166A
.................... 		leitura=varreMatriz(); 
1660:  CALL   034C
1664:  MOVFF  01,04
1668:  BRA    165A
.................... 	return leitura; 
166A:  MOVFF  04,01
166E:  RETURN 0
.................... } 
....................  
.................... void automatico(void) 
.................... { 
....................      
.................... 	inicioAuto: 
....................  
.................... 	int n[6]; 
.................... 	int sinal; 
.................... 	int cursor; 
.................... 	 
.................... 	for(int j=0;j<2;j++) 
*
16F8:  CLRF   2A
16FA:  MOVF   2A,W
16FC:  SUBLW  01
16FE:  BTFSS  FD8.0
1700:  BRA    1D40
.................... 	{ 
.................... 		if(j==0) 
1702:  MOVF   2A,F
1704:  BNZ   1730
.................... 		{ 
.................... 			printf(lcd_putc,"\f"); 
1706:  MOVLW  0C
1708:  MOVWF  45
170A:  CALL   0286
....................     		lcd_gotoxy (1,1); 
170E:  MOVLW  01
1710:  MOVWF  46
1712:  MOVWF  47
1714:  CALL   0264
....................     		printf(lcd_putc,"AH="); 
1718:  MOVLW  26
171A:  MOVWF  FF6
171C:  MOVLW  01
171E:  MOVWF  FF7
1720:  CALL   02C8
....................     		delay_ms(5); 
1724:  MOVLW  05
1726:  MOVWF  46
1728:  CALL   0146
.................... 			cursor=4; 
172C:  MOVLW  04
172E:  MOVWF  29
.................... 		} 
....................  
.................... 		if(j==1) 
1730:  DECFSZ 2A,W
1732:  BRA    17E4
.................... 		{ 
.................... 			lcd_gotoxy (1,2); 
1734:  MOVLW  01
1736:  MOVWF  46
1738:  MOVLW  02
173A:  MOVWF  47
173C:  CALL   0264
....................     		printf(lcd_putc,"DEC="); 
1740:  MOVLW  2A
1742:  MOVWF  FF6
1744:  MOVLW  01
1746:  MOVWF  FF7
1748:  CALL   02C8
....................     		delay_ms(5); 
174C:  MOVLW  05
174E:  MOVWF  46
1750:  CALL   0146
.................... 			do{ 
.................... 				sinal=receberNum(); 
1754:  RCALL  1656
1756:  MOVFF  01,28
.................... 			}while(sinal!=1 && sinal!=4 && sinal!=8 && sinal!=2 && sinal!=3 && sinal!=6); 
175A:  DECFSZ 28,W
175C:  BRA    1760
175E:  BRA    177E
1760:  MOVF   28,W
1762:  SUBLW  04
1764:  BZ    177E
1766:  MOVF   28,W
1768:  SUBLW  08
176A:  BZ    177E
176C:  MOVF   28,W
176E:  SUBLW  02
1770:  BZ    177E
1772:  MOVF   28,W
1774:  SUBLW  03
1776:  BZ    177E
1778:  MOVF   28,W
177A:  SUBLW  06
177C:  BNZ   1754
.................... 			if(sinal==1 || sinal==4 || sinal==8){ 
177E:  DECFSZ 28,W
1780:  BRA    1784
1782:  BRA    1790
1784:  MOVF   28,W
1786:  SUBLW  04
1788:  BZ    1790
178A:  MOVF   28,W
178C:  SUBLW  08
178E:  BNZ   17AE
.................... 				lcd_gotoxy (5,2); 
1790:  MOVLW  05
1792:  MOVWF  46
1794:  MOVLW  02
1796:  MOVWF  47
1798:  CALL   0264
....................     			printf(lcd_putc,"-"); 
179C:  MOVLW  2D
179E:  MOVWF  45
17A0:  CALL   0286
.................... 				delay_ms(5); 
17A4:  MOVLW  05
17A6:  MOVWF  46
17A8:  CALL   0146
.................... 				sinal=-1; 
17AC:  SETF   28
.................... 			} 
.................... 			if(sinal==2 || sinal==3 || sinal==6){ 
17AE:  MOVF   28,W
17B0:  SUBLW  02
17B2:  BZ    17C0
17B4:  MOVF   28,W
17B6:  SUBLW  03
17B8:  BZ    17C0
17BA:  MOVF   28,W
17BC:  SUBLW  06
17BE:  BNZ   17E0
.................... 				lcd_gotoxy (5,2); 
17C0:  MOVLW  05
17C2:  MOVWF  46
17C4:  MOVLW  02
17C6:  MOVWF  47
17C8:  CALL   0264
....................     			printf(lcd_putc,"+"); 
17CC:  MOVLW  2B
17CE:  MOVWF  45
17D0:  CALL   0286
.................... 				delay_ms(5); 
17D4:  MOVLW  05
17D6:  MOVWF  46
17D8:  CALL   0146
.................... 				sinal=1; 
17DC:  MOVLW  01
17DE:  MOVWF  28
.................... 			} 
.................... 			cursor=6; 
17E0:  MOVLW  06
17E2:  MOVWF  29
.................... 		} 
....................  
.................... 		for(int i=0;i<6;i++) 
17E4:  CLRF   2B
17E6:  MOVF   2B,W
17E8:  SUBLW  05
17EA:  BTFSS  FD8.0
17EC:  BRA    18D6
.................... 		{ 
.................... 			n[i]=receberNum(); 
17EE:  CLRF   03
17F0:  MOVF   2B,W
17F2:  ADDLW  22
17F4:  MOVWF  01
17F6:  MOVLW  00
17F8:  ADDWFC 03,F
17FA:  MOVFF  01,2C
17FE:  MOVFF  03,2D
1802:  RCALL  1656
1804:  MOVFF  2D,FEA
1808:  MOVFF  2C,FE9
180C:  MOVFF  01,FEF
.................... 			display=n[i]+'0'; 
1810:  CLRF   03
1812:  MOVF   2B,W
1814:  ADDLW  22
1816:  MOVWF  FE9
1818:  MOVLW  00
181A:  ADDWFC 03,W
181C:  MOVWF  FEA
181E:  MOVLW  30
1820:  ADDWF  FEF,W
1822:  MOVWF  07
.................... 			lcd_gotoxy (cursor,j+1); 
1824:  MOVLW  01
1826:  ADDWF  2A,W
1828:  MOVWF  2C
182A:  MOVFF  29,46
182E:  MOVWF  47
1830:  CALL   0264
.................... 			 
.................... 			if(cursor==6&&j==0){ 
1834:  MOVF   29,W
1836:  SUBLW  06
1838:  BNZ   1850
183A:  MOVF   2A,F
183C:  BNZ   1850
.................... 		    	printf(lcd_putc,"h"); 
183E:  MOVLW  68
1840:  MOVWF  45
1842:  CALL   0286
.................... 				delay_ms(5); 
1846:  MOVLW  05
1848:  MOVWF  46
184A:  CALL   0146
.................... 				cursor++; 
184E:  INCF   29,F
.................... 			} 
.................... 			if(cursor==8&&j==1){ 
1850:  MOVF   29,W
1852:  SUBLW  08
1854:  BNZ   1872
1856:  DECFSZ 2A,W
1858:  BRA    1872
.................... 				printf(lcd_putc,"deg"); 
185A:  MOVLW  30
185C:  MOVWF  FF6
185E:  MOVLW  01
1860:  MOVWF  FF7
1862:  CALL   02C8
.................... 				delay_ms(5); 
1866:  MOVLW  05
1868:  MOVWF  46
186A:  CALL   0146
.................... 				cursor+=3; 
186E:  MOVLW  03
1870:  ADDWF  29,F
.................... 			} 
.................... 			if((cursor==9&&j==0)||(cursor==13&&j==1)){ 
1872:  MOVF   29,W
1874:  SUBLW  09
1876:  BNZ   187C
1878:  MOVF   2A,F
187A:  BZ    1886
187C:  MOVF   29,W
187E:  SUBLW  0D
1880:  BNZ   1898
1882:  DECFSZ 2A,W
1884:  BRA    1898
.................... 				printf(lcd_putc,"m"); 
1886:  MOVLW  6D
1888:  MOVWF  45
188A:  CALL   0286
.................... 				delay_ms(5); 
188E:  MOVLW  05
1890:  MOVWF  46
1892:  CALL   0146
.................... 				cursor++; 
1896:  INCF   29,F
.................... 			} 
.................... 			lcd_gotoxy (cursor,j+1); 
1898:  MOVLW  01
189A:  ADDWF  2A,W
189C:  MOVWF  2C
189E:  MOVFF  29,46
18A2:  MOVWF  47
18A4:  CALL   0264
.................... 			printf(lcd_putc,&display); 
18A8:  CLRF   FEA
18AA:  MOVLW  07
18AC:  MOVWF  FE9
18AE:  CALL   09A6
.................... 		    delay_ms(5); 
18B2:  MOVLW  05
18B4:  MOVWF  46
18B6:  CALL   0146
.................... 			cursor++; 
18BA:  INCF   29,F
.................... 			if(n[i]==10) 
18BC:  CLRF   03
18BE:  MOVF   2B,W
18C0:  ADDLW  22
18C2:  MOVWF  FE9
18C4:  MOVLW  00
18C6:  ADDWFC 03,W
18C8:  MOVWF  FEA
18CA:  MOVF   FEF,W
18CC:  SUBLW  0A
18CE:  BNZ   18D2
.................... 				goto inicioAuto; 
18D0:  BRA    16F8
18D2:  INCF   2B,F
18D4:  BRA    17E6
.................... 		} 
.................... 		lcd_gotoxy (cursor,j+1); 
18D6:  MOVLW  01
18D8:  ADDWF  2A,W
18DA:  MOVWF  2C
18DC:  MOVFF  29,46
18E0:  MOVWF  47
18E2:  CALL   0264
.................... 		printf(lcd_putc,"s"); 
18E6:  MOVLW  73
18E8:  MOVWF  45
18EA:  CALL   0286
.................... 		delay_ms(5); 
18EE:  MOVLW  05
18F0:  MOVWF  46
18F2:  CALL   0146
....................  
.................... 		if(j==0) 
18F6:  MOVF   2A,F
18F8:  BTFSS  FD8.2
18FA:  BRA    1B14
.................... 		{ 
.................... 			AH_obj=n[0]*10; 
18FC:  MOVF   22,W
18FE:  MULLW  0A
1900:  MOVF   FF3,W
1902:  CLRF   48
1904:  MOVWF  47
1906:  CALL   05C8
190A:  MOVFF  03,13
190E:  MOVFF  02,12
1912:  MOVFF  01,11
1916:  MOVFF  00,10
.................... 			AH_obj+=n[1]; 
191A:  CLRF   48
191C:  MOVFF  23,47
1920:  CALL   05C8
1924:  BCF    FD8.1
1926:  MOVFF  13,4A
192A:  MOVFF  12,49
192E:  MOVFF  11,48
1932:  MOVFF  10,47
1936:  MOVFF  03,4E
193A:  MOVFF  02,4D
193E:  MOVFF  01,4C
1942:  MOVFF  00,4B
1946:  CALL   05FE
194A:  MOVFF  03,13
194E:  MOVFF  02,12
1952:  MOVFF  01,11
1956:  MOVFF  00,10
.................... 			AH_obj+=(n[2]*10)/60; 
195A:  MOVF   24,W
195C:  MULLW  0A
195E:  MOVFF  FF3,2D
1962:  MOVFF  2D,2E
1966:  MOVLW  3C
1968:  MOVWF  2F
196A:  RCALL  1670
196C:  MOVF   01,W
196E:  CLRF   48
1970:  MOVWF  47
1972:  CALL   05C8
1976:  BCF    FD8.1
1978:  MOVFF  13,4A
197C:  MOVFF  12,49
1980:  MOVFF  11,48
1984:  MOVFF  10,47
1988:  MOVFF  03,4E
198C:  MOVFF  02,4D
1990:  MOVFF  01,4C
1994:  MOVFF  00,4B
1998:  CALL   05FE
199C:  MOVFF  03,13
19A0:  MOVFF  02,12
19A4:  MOVFF  01,11
19A8:  MOVFF  00,10
.................... 			AH_obj+=n[3]/60; 
19AC:  MOVFF  25,2E
19B0:  MOVLW  3C
19B2:  MOVWF  2F
19B4:  RCALL  1670
19B6:  MOVF   01,W
19B8:  CLRF   48
19BA:  MOVWF  47
19BC:  CALL   05C8
19C0:  BCF    FD8.1
19C2:  MOVFF  13,4A
19C6:  MOVFF  12,49
19CA:  MOVFF  11,48
19CE:  MOVFF  10,47
19D2:  MOVFF  03,4E
19D6:  MOVFF  02,4D
19DA:  MOVFF  01,4C
19DE:  MOVFF  00,4B
19E2:  CALL   05FE
19E6:  MOVFF  03,13
19EA:  MOVFF  02,12
19EE:  MOVFF  01,11
19F2:  MOVFF  00,10
.................... 			AH_obj+=(n[4]*10)/3600; 
19F6:  MOVF   26,W
19F8:  MULLW  0A
19FA:  MOVFF  FF3,2D
19FE:  CLRF   2F
1A00:  MOVFF  2D,2E
1A04:  MOVLW  0E
1A06:  MOVWF  31
1A08:  MOVLW  10
1A0A:  MOVWF  30
1A0C:  RCALL  1698
1A0E:  MOVFF  02,03
1A12:  MOVFF  01,47
1A16:  MOVFF  02,48
1A1A:  CALL   05C8
1A1E:  BCF    FD8.1
1A20:  MOVFF  13,4A
1A24:  MOVFF  12,49
1A28:  MOVFF  11,48
1A2C:  MOVFF  10,47
1A30:  MOVFF  03,4E
1A34:  MOVFF  02,4D
1A38:  MOVFF  01,4C
1A3C:  MOVFF  00,4B
1A40:  CALL   05FE
1A44:  MOVFF  03,13
1A48:  MOVFF  02,12
1A4C:  MOVFF  01,11
1A50:  MOVFF  00,10
.................... 			AH_obj+=n[5]/3600; 
1A54:  CLRF   2F
1A56:  MOVFF  27,2E
1A5A:  MOVLW  0E
1A5C:  MOVWF  31
1A5E:  MOVLW  10
1A60:  MOVWF  30
1A62:  RCALL  1698
1A64:  MOVFF  02,03
1A68:  MOVFF  01,47
1A6C:  MOVFF  02,48
1A70:  CALL   05C8
1A74:  BCF    FD8.1
1A76:  MOVFF  13,4A
1A7A:  MOVFF  12,49
1A7E:  MOVFF  11,48
1A82:  MOVFF  10,47
1A86:  MOVFF  03,4E
1A8A:  MOVFF  02,4D
1A8E:  MOVFF  01,4C
1A92:  MOVFF  00,4B
1A96:  CALL   05FE
1A9A:  MOVFF  03,13
1A9E:  MOVFF  02,12
1AA2:  MOVFF  01,11
1AA6:  MOVFF  00,10
.................... 		 
.................... 			if(AH_obj>24||AH_obj<0) 
1AAA:  CLRF   46
1AAC:  CLRF   45
1AAE:  MOVLW  40
1AB0:  MOVWF  44
1AB2:  MOVLW  83
1AB4:  MOVWF  43
1AB6:  MOVFF  13,4A
1ABA:  MOVFF  12,49
1ABE:  MOVFF  11,48
1AC2:  MOVFF  10,47
1AC6:  CALL   09CA
1ACA:  BC    1AEA
1ACC:  MOVFF  13,46
1AD0:  MOVFF  12,45
1AD4:  MOVFF  11,44
1AD8:  MOVFF  10,43
1ADC:  CLRF   4A
1ADE:  CLRF   49
1AE0:  CLRF   48
1AE2:  CLRF   47
1AE4:  CALL   09CA
1AE8:  BNC   1B14
.................... 			{	 
.................... 		    	lcd_gotoxy (1,2); 
1AEA:  MOVLW  01
1AEC:  MOVWF  46
1AEE:  MOVLW  02
1AF0:  MOVWF  47
1AF2:  CALL   0264
.................... 		    	printf(lcd_putc," Valor Invalido "); 
1AF6:  MOVLW  34
1AF8:  MOVWF  FF6
1AFA:  MOVLW  01
1AFC:  MOVWF  FF7
1AFE:  CALL   02C8
.................... 		    	delay_ms(1000); 
1B02:  MOVLW  04
1B04:  MOVWF  2C
1B06:  MOVLW  FA
1B08:  MOVWF  46
1B0A:  CALL   0146
1B0E:  DECFSZ 2C,F
1B10:  BRA    1B06
.................... 				goto inicioAuto; 
1B12:  BRA    16F8
.................... 			} 
.................... 		} 
.................... 		if(j==1) 
1B14:  DECFSZ 2A,W
1B16:  BRA    1D3C
.................... 		{ 
.................... 			DEC_obj=n[0]*10; 
1B18:  MOVF   22,W
1B1A:  MULLW  0A
1B1C:  MOVF   FF3,W
1B1E:  CLRF   48
1B20:  MOVWF  47
1B22:  CALL   05C8
1B26:  MOVFF  03,17
1B2A:  MOVFF  02,16
1B2E:  MOVFF  01,15
1B32:  MOVFF  00,14
.................... 			DEC_obj+=n[1]; 
1B36:  CLRF   48
1B38:  MOVFF  23,47
1B3C:  CALL   05C8
1B40:  BCF    FD8.1
1B42:  MOVFF  17,4A
1B46:  MOVFF  16,49
1B4A:  MOVFF  15,48
1B4E:  MOVFF  14,47
1B52:  MOVFF  03,4E
1B56:  MOVFF  02,4D
1B5A:  MOVFF  01,4C
1B5E:  MOVFF  00,4B
1B62:  CALL   05FE
1B66:  MOVFF  03,17
1B6A:  MOVFF  02,16
1B6E:  MOVFF  01,15
1B72:  MOVFF  00,14
.................... 			DEC_obj+=((n[2]*10)/60)*15; 
1B76:  MOVF   24,W
1B78:  MULLW  0A
1B7A:  MOVFF  FF3,2D
1B7E:  MOVFF  2D,2E
1B82:  MOVLW  3C
1B84:  MOVWF  2F
1B86:  RCALL  1670
1B88:  MOVF   01,W
1B8A:  MULLW  0F
1B8C:  MOVF   FF3,W
1B8E:  CLRF   48
1B90:  MOVWF  47
1B92:  CALL   05C8
1B96:  BCF    FD8.1
1B98:  MOVFF  17,4A
1B9C:  MOVFF  16,49
1BA0:  MOVFF  15,48
1BA4:  MOVFF  14,47
1BA8:  MOVFF  03,4E
1BAC:  MOVFF  02,4D
1BB0:  MOVFF  01,4C
1BB4:  MOVFF  00,4B
1BB8:  CALL   05FE
1BBC:  MOVFF  03,17
1BC0:  MOVFF  02,16
1BC4:  MOVFF  01,15
1BC8:  MOVFF  00,14
.................... 			DEC_obj+=(n[3]/60)*15; 
1BCC:  MOVFF  25,2E
1BD0:  MOVLW  3C
1BD2:  MOVWF  2F
1BD4:  RCALL  1670
1BD6:  MOVF   01,W
1BD8:  MULLW  0F
1BDA:  MOVF   FF3,W
1BDC:  CLRF   48
1BDE:  MOVWF  47
1BE0:  CALL   05C8
1BE4:  BCF    FD8.1
1BE6:  MOVFF  17,4A
1BEA:  MOVFF  16,49
1BEE:  MOVFF  15,48
1BF2:  MOVFF  14,47
1BF6:  MOVFF  03,4E
1BFA:  MOVFF  02,4D
1BFE:  MOVFF  01,4C
1C02:  MOVFF  00,4B
1C06:  CALL   05FE
1C0A:  MOVFF  03,17
1C0E:  MOVFF  02,16
1C12:  MOVFF  01,15
1C16:  MOVFF  00,14
.................... 			DEC_obj+=((n[4]*10)/3600)*15; 
1C1A:  MOVF   26,W
1C1C:  MULLW  0A
1C1E:  MOVFF  FF3,2D
1C22:  CLRF   2F
1C24:  MOVFF  2D,2E
1C28:  MOVLW  0E
1C2A:  MOVWF  31
1C2C:  MOVLW  10
1C2E:  MOVWF  30
1C30:  RCALL  1698
1C32:  MOVFF  02,2D
1C36:  MOVFF  01,2C
1C3A:  MOVFF  02,2F
1C3E:  MOVFF  01,2E
1C42:  CLRF   31
1C44:  MOVLW  0F
1C46:  MOVWF  30
1C48:  RCALL  16DA
1C4A:  MOVFF  02,03
1C4E:  MOVFF  01,47
1C52:  MOVFF  02,48
1C56:  CALL   05C8
1C5A:  BCF    FD8.1
1C5C:  MOVFF  17,4A
1C60:  MOVFF  16,49
1C64:  MOVFF  15,48
1C68:  MOVFF  14,47
1C6C:  MOVFF  03,4E
1C70:  MOVFF  02,4D
1C74:  MOVFF  01,4C
1C78:  MOVFF  00,4B
1C7C:  CALL   05FE
1C80:  MOVFF  03,17
1C84:  MOVFF  02,16
1C88:  MOVFF  01,15
1C8C:  MOVFF  00,14
.................... 			DEC_obj+=(n[5]/3600)*15; 
1C90:  CLRF   2F
1C92:  MOVFF  27,2E
1C96:  MOVLW  0E
1C98:  MOVWF  31
1C9A:  MOVLW  10
1C9C:  MOVWF  30
1C9E:  RCALL  1698
1CA0:  MOVFF  02,2D
1CA4:  MOVFF  01,2C
1CA8:  MOVFF  02,2F
1CAC:  MOVFF  01,2E
1CB0:  CLRF   31
1CB2:  MOVLW  0F
1CB4:  MOVWF  30
1CB6:  RCALL  16DA
1CB8:  MOVFF  02,03
1CBC:  MOVFF  01,47
1CC0:  MOVFF  02,48
1CC4:  CALL   05C8
1CC8:  BCF    FD8.1
1CCA:  MOVFF  17,4A
1CCE:  MOVFF  16,49
1CD2:  MOVFF  15,48
1CD6:  MOVFF  14,47
1CDA:  MOVFF  03,4E
1CDE:  MOVFF  02,4D
1CE2:  MOVFF  01,4C
1CE6:  MOVFF  00,4B
1CEA:  CALL   05FE
1CEE:  MOVFF  03,17
1CF2:  MOVFF  02,16
1CF6:  MOVFF  01,15
1CFA:  MOVFF  00,14
.................... 			DEC_obj=DEC_obj*sinal; 
1CFE:  CLRF   48
1D00:  MOVFF  28,47
1D04:  CALL   05C8
1D08:  MOVFF  17,4A
1D0C:  MOVFF  16,49
1D10:  MOVFF  15,48
1D14:  MOVFF  14,47
1D18:  MOVFF  03,4E
1D1C:  MOVFF  02,4D
1D20:  MOVFF  01,4C
1D24:  MOVFF  00,4B
1D28:  CALL   0868
1D2C:  MOVFF  03,17
1D30:  MOVFF  02,16
1D34:  MOVFF  01,15
1D38:  MOVFF  00,14
.................... 			 
.................... 			/*if(DEC_obj>90 || DEC_obj<-90) 
.................... 			{ 
.................... 				lcd_gotoxy (1,2); 
.................... 		    	printf(lcd_putc," Valor Invalido "); 
.................... 		    	delay_ms(1000); 
.................... 				goto inicioAuto; 
.................... 			}*/ 
.................... 		} 
1D3C:  INCF   2A,F
1D3E:  BRA    16FA
.................... 	} 
.................... 	do{ 
.................... 		leitura=varreMatriz(); 
1D40:  CALL   034C
1D44:  MOVFF  01,04
.................... 	}while(leitura!=10&&leitura!=11); 
1D48:  MOVF   04,W
1D4A:  SUBLW  0A
1D4C:  BZ    1D54
1D4E:  MOVF   04,W
1D50:  SUBLW  0B
1D52:  BNZ   1D40
.................... 	if(leitura==10) 
1D54:  MOVF   04,W
1D56:  SUBLW  0A
1D58:  BNZ   1D5C
.................... 		goto inicioAuto; 
1D5A:  BRA    16F8
....................  
.................... 	if(AH<AH_obj) 
1D5C:  MOVFF  0B,46
1D60:  MOVFF  0A,45
1D64:  MOVFF  09,44
1D68:  MOVFF  08,43
1D6C:  MOVFF  13,4A
1D70:  MOVFF  12,49
1D74:  MOVFF  11,48
1D78:  MOVFF  10,47
1D7C:  CALL   09CA
1D80:  BNC   1E62
.................... 	{ 
.................... 		while(AH<AH_obj) 
1D82:  MOVFF  0B,46
1D86:  MOVFF  0A,45
1D8A:  MOVFF  09,44
1D8E:  MOVFF  08,43
1D92:  MOVFF  13,4A
1D96:  MOVFF  12,49
1D9A:  MOVFF  11,48
1D9E:  MOVFF  10,47
1DA2:  CALL   09CA
1DA6:  BNC   1E60
.................... 		{ 
.................... 			if(AH<12) 
1DA8:  MOVFF  0B,46
1DAC:  MOVFF  0A,45
1DB0:  MOVFF  09,44
1DB4:  MOVFF  08,43
1DB8:  CLRF   4A
1DBA:  CLRF   49
1DBC:  MOVLW  40
1DBE:  MOVWF  48
1DC0:  MOVLW  82
1DC2:  MOVWF  47
1DC4:  CALL   09CA
1DC8:  BNC   1DD4
.................... 				motorAR_h(2); 
1DCA:  MOVLW  02
1DCC:  MOVWF  2C
1DCE:  CALL   11C0
1DD2:  BRA    1DDC
.................... 			else 
.................... 				motorAR_antih(2); 
1DD4:  MOVLW  02
1DD6:  MOVWF  2C
1DD8:  CALL   1152
.................... 			AH=AH+(passo_AH*4); 
1DDC:  MOVFF  1B,4A
1DE0:  MOVFF  1A,49
1DE4:  MOVFF  19,48
1DE8:  MOVFF  18,47
1DEC:  CLRF   4E
1DEE:  CLRF   4D
1DF0:  CLRF   4C
1DF2:  MOVLW  81
1DF4:  MOVWF  4B
1DF6:  CALL   0868
1DFA:  BCF    FD8.1
1DFC:  MOVFF  0B,4A
1E00:  MOVFF  0A,49
1E04:  MOVFF  09,48
1E08:  MOVFF  08,47
1E0C:  MOVFF  03,4E
1E10:  MOVFF  02,4D
1E14:  MOVFF  01,4C
1E18:  MOVFF  00,4B
1E1C:  CALL   05FE
1E20:  MOVFF  03,0B
1E24:  MOVFF  02,0A
1E28:  MOVFF  01,09
1E2C:  MOVFF  00,08
.................... 			if(AH>24) 
1E30:  CLRF   46
1E32:  CLRF   45
1E34:  MOVLW  40
1E36:  MOVWF  44
1E38:  MOVLW  83
1E3A:  MOVWF  43
1E3C:  MOVFF  0B,4A
1E40:  MOVFF  0A,49
1E44:  MOVFF  09,48
1E48:  MOVFF  08,47
1E4C:  CALL   09CA
1E50:  BNC   1E5A
.................... 				AH=0; 
1E52:  CLRF   0B
1E54:  CLRF   0A
1E56:  CLRF   09
1E58:  CLRF   08
.................... 			exibirAH(); 
1E5A:  CALL   0A40
1E5E:  BRA    1D82
.................... 		}  
.................... 	}else{ 
1E60:  BRA    1F40
.................... 		while(AH>AH_obj) 
1E62:  MOVFF  13,46
1E66:  MOVFF  12,45
1E6A:  MOVFF  11,44
1E6E:  MOVFF  10,43
1E72:  MOVFF  0B,4A
1E76:  MOVFF  0A,49
1E7A:  MOVFF  09,48
1E7E:  MOVFF  08,47
1E82:  CALL   09CA
1E86:  BNC   1F40
.................... 		{ 
.................... 			if(AH<12) 
1E88:  MOVFF  0B,46
1E8C:  MOVFF  0A,45
1E90:  MOVFF  09,44
1E94:  MOVFF  08,43
1E98:  CLRF   4A
1E9A:  CLRF   49
1E9C:  MOVLW  40
1E9E:  MOVWF  48
1EA0:  MOVLW  82
1EA2:  MOVWF  47
1EA4:  CALL   09CA
1EA8:  BNC   1EB4
.................... 				motorAR_antih(vel); 
1EAA:  MOVFF  06,2C
1EAE:  CALL   1152
1EB2:  BRA    1EBC
.................... 			else 
.................... 				motorAR_h(vel); 
1EB4:  MOVFF  06,2C
1EB8:  CALL   11C0
.................... 			AH=AH-(passo_AH*4); 
1EBC:  MOVFF  1B,4A
1EC0:  MOVFF  1A,49
1EC4:  MOVFF  19,48
1EC8:  MOVFF  18,47
1ECC:  CLRF   4E
1ECE:  CLRF   4D
1ED0:  CLRF   4C
1ED2:  MOVLW  81
1ED4:  MOVWF  4B
1ED6:  CALL   0868
1EDA:  BSF    FD8.1
1EDC:  MOVFF  0B,4A
1EE0:  MOVFF  0A,49
1EE4:  MOVFF  09,48
1EE8:  MOVFF  08,47
1EEC:  MOVFF  03,4E
1EF0:  MOVFF  02,4D
1EF4:  MOVFF  01,4C
1EF8:  MOVFF  00,4B
1EFC:  CALL   05FE
1F00:  MOVFF  03,0B
1F04:  MOVFF  02,0A
1F08:  MOVFF  01,09
1F0C:  MOVFF  00,08
.................... 			if(AH<0) 
1F10:  MOVFF  0B,46
1F14:  MOVFF  0A,45
1F18:  MOVFF  09,44
1F1C:  MOVFF  08,43
1F20:  CLRF   4A
1F22:  CLRF   49
1F24:  CLRF   48
1F26:  CLRF   47
1F28:  CALL   09CA
1F2C:  BNC   1F3A
.................... 				AH=24; 
1F2E:  CLRF   0B
1F30:  CLRF   0A
1F32:  MOVLW  40
1F34:  MOVWF  09
1F36:  MOVLW  83
1F38:  MOVWF  08
.................... 			exibirAH(); 
1F3A:  CALL   0A40
1F3E:  BRA    1E62
.................... 		} 
.................... 	} 
.................... 	delay_ms(500); 
1F40:  MOVLW  02
1F42:  MOVWF  2C
1F44:  MOVLW  FA
1F46:  MOVWF  46
1F48:  CALL   0146
1F4C:  DECFSZ 2C,F
1F4E:  BRA    1F44
.................... 	if(DEC<DEC_obj) 
1F50:  MOVFF  0F,46
1F54:  MOVFF  0E,45
1F58:  MOVFF  0D,44
1F5C:  MOVFF  0C,43
1F60:  MOVFF  17,4A
1F64:  MOVFF  16,49
1F68:  MOVFF  15,48
1F6C:  MOVFF  14,47
1F70:  CALL   09CA
1F74:  BNC   2000
.................... 	{ 
.................... 		while(DEC<DEC_obj) 
1F76:  MOVFF  0F,46
1F7A:  MOVFF  0E,45
1F7E:  MOVFF  0D,44
1F82:  MOVFF  0C,43
1F86:  MOVFF  17,4A
1F8A:  MOVFF  16,49
1F8E:  MOVFF  15,48
1F92:  MOVFF  14,47
1F96:  CALL   09CA
1F9A:  BNC   1FFE
.................... 		{ 
.................... 			/*if(AH>12 && DEC>-90){ 
.................... 				DEC-=(passo_DEC*4); 
.................... 				motorAR_h(vel); // trocar por motorDEC_h 
.................... 			}else if (AH<=12 && DEC<90){*/ 
.................... 				DEC+=(passo_DEC*4); 
1F9C:  MOVFF  1F,4A
1FA0:  MOVFF  1E,49
1FA4:  MOVFF  1D,48
1FA8:  MOVFF  1C,47
1FAC:  CLRF   4E
1FAE:  CLRF   4D
1FB0:  CLRF   4C
1FB2:  MOVLW  81
1FB4:  MOVWF  4B
1FB6:  CALL   0868
1FBA:  BCF    FD8.1
1FBC:  MOVFF  0F,4A
1FC0:  MOVFF  0E,49
1FC4:  MOVFF  0D,48
1FC8:  MOVFF  0C,47
1FCC:  MOVFF  03,4E
1FD0:  MOVFF  02,4D
1FD4:  MOVFF  01,4C
1FD8:  MOVFF  00,4B
1FDC:  CALL   05FE
1FE0:  MOVFF  03,0F
1FE4:  MOVFF  02,0E
1FE8:  MOVFF  01,0D
1FEC:  MOVFF  00,0C
.................... 				motorAR_h(vel); // trocar por motorDEC_h 
1FF0:  MOVFF  06,2C
1FF4:  CALL   11C0
.................... 			//} 
.................... 			exibirAH(); 
1FF8:  CALL   0A40
1FFC:  BRA    1F76
.................... 		} 
.................... 	}else{ 
1FFE:  BRA    2088
.................... 		while(DEC>DEC_obj) 
2000:  MOVFF  17,46
2004:  MOVFF  16,45
2008:  MOVFF  15,44
200C:  MOVFF  14,43
2010:  MOVFF  0F,4A
2014:  MOVFF  0E,49
2018:  MOVFF  0D,48
201C:  MOVFF  0C,47
2020:  CALL   09CA
2024:  BNC   2088
.................... 		{ 
.................... 			/*if(AH>12 && DEC<90){ 
.................... 				DEC+=(passo_DEC*4); 
.................... 				motorAR_antih(vel); // trocar por motorDEC_antih 
.................... 			}else if (AH<=12 && DEC>-90){*/ 
.................... 				DEC-=(passo_DEC*4); 
2026:  MOVFF  1F,4A
202A:  MOVFF  1E,49
202E:  MOVFF  1D,48
2032:  MOVFF  1C,47
2036:  CLRF   4E
2038:  CLRF   4D
203A:  CLRF   4C
203C:  MOVLW  81
203E:  MOVWF  4B
2040:  CALL   0868
2044:  BSF    FD8.1
2046:  MOVFF  0F,4A
204A:  MOVFF  0E,49
204E:  MOVFF  0D,48
2052:  MOVFF  0C,47
2056:  MOVFF  03,4E
205A:  MOVFF  02,4D
205E:  MOVFF  01,4C
2062:  MOVFF  00,4B
2066:  CALL   05FE
206A:  MOVFF  03,0F
206E:  MOVFF  02,0E
2072:  MOVFF  01,0D
2076:  MOVFF  00,0C
.................... 				motorAR_antih(vel); // trocar por motorDEC_antih 
207A:  MOVFF  06,2C
207E:  CALL   1152
.................... 			//} 
.................... 			exibirAH(); 
2082:  CALL   0A40
2086:  BRA    2000
.................... 		} 
.................... 	}		 
2088:  GOTO   2100 (RETURN)
.................... } 
....................  
.................... void desabilitaMatriz() 
.................... { 
.................... 	coluna1 = 1; 
*
025C:  BSF    F80.1
.................... 	coluna2 = 1; 
025E:  BSF    F80.2
.................... 	coluna3 = 1;	 
0260:  BSF    F80.3
0262:  RETURN 0
.................... } 
....................  
....................  
.................... int varreMatriz() 
.................... { 
.................... 	coluna1 = 0; 
*
034C:  BCF    F80.1
.................... 	if(!linha1){ 
034E:  BTFSC  F81.4
0350:  BRA    035E
.................... 		while(linha1==0); 
0352:  BTFSS  F81.4
0354:  BRA    0352
.................... 		desabilitaMatriz(); 
0356:  RCALL  025C
.................... 		return 1; 
0358:  MOVLW  01
035A:  MOVWF  01
035C:  BRA    041C
.................... 	} 
.................... 	if(!linha2){ 
035E:  BTFSC  F81.5
0360:  BRA    036E
.................... 		while(linha2==0); 
0362:  BTFSS  F81.5
0364:  BRA    0362
.................... 		desabilitaMatriz(); 
0366:  RCALL  025C
.................... 		return 4; 
0368:  MOVLW  04
036A:  MOVWF  01
036C:  BRA    041C
.................... 	} 
.................... 	if(!linha3){ 
036E:  BTFSC  F81.6
0370:  BRA    037E
.................... 		while(linha3==0); 
0372:  BTFSS  F81.6
0374:  BRA    0372
.................... 		desabilitaMatriz(); 
0376:  RCALL  025C
.................... 		return 7; 
0378:  MOVLW  07
037A:  MOVWF  01
037C:  BRA    041C
.................... 	} 
.................... 	if(!linha4){ 
037E:  BTFSC  F81.7
0380:  BRA    038E
.................... 		while(linha4==0); 
0382:  BTFSS  F81.7
0384:  BRA    0382
.................... 		desabilitaMatriz(); 
0386:  RCALL  025C
.................... 		return 10; 
0388:  MOVLW  0A
038A:  MOVWF  01
038C:  BRA    041C
.................... 	} 
.................... 	desabilitaMatriz(); 
038E:  RCALL  025C
....................  
.................... 	coluna2=0; 
0390:  BCF    F80.2
.................... 	if(!linha1){ 
0392:  BTFSC  F81.4
0394:  BRA    03A2
.................... 		while(linha1==0); 
0396:  BTFSS  F81.4
0398:  BRA    0396
.................... 		desabilitaMatriz(); 
039A:  RCALL  025C
.................... 		return 2; 
039C:  MOVLW  02
039E:  MOVWF  01
03A0:  BRA    041C
.................... 	} 
.................... 	if(!linha2){ 
03A2:  BTFSC  F81.5
03A4:  BRA    03B2
.................... 		while(linha2==0); 
03A6:  BTFSS  F81.5
03A8:  BRA    03A6
.................... 		desabilitaMatriz(); 
03AA:  RCALL  025C
.................... 		return 5; 
03AC:  MOVLW  05
03AE:  MOVWF  01
03B0:  BRA    041C
.................... 	} 
.................... 	if(!linha3){ 
03B2:  BTFSC  F81.6
03B4:  BRA    03C2
.................... 		while(linha3==0); 
03B6:  BTFSS  F81.6
03B8:  BRA    03B6
.................... 		desabilitaMatriz(); 
03BA:  RCALL  025C
.................... 		return 8; 
03BC:  MOVLW  08
03BE:  MOVWF  01
03C0:  BRA    041C
.................... 	} 
.................... 	if(!linha4){ 
03C2:  BTFSC  F81.7
03C4:  BRA    03D2
.................... 		while(linha4==0); 
03C6:  BTFSS  F81.7
03C8:  BRA    03C6
.................... 		desabilitaMatriz(); 
03CA:  RCALL  025C
.................... 		return 0; 
03CC:  MOVLW  00
03CE:  MOVWF  01
03D0:  BRA    041C
.................... 	} 
.................... 	desabilitaMatriz(); 
03D2:  RCALL  025C
.................... 	 
.................... 	coluna3=0; 
03D4:  BCF    F80.3
.................... 	if(!linha1){ 
03D6:  BTFSC  F81.4
03D8:  BRA    03E6
.................... 		while(linha1==0); 
03DA:  BTFSS  F81.4
03DC:  BRA    03DA
.................... 		desabilitaMatriz(); 
03DE:  RCALL  025C
.................... 		return 3; 
03E0:  MOVLW  03
03E2:  MOVWF  01
03E4:  BRA    041C
.................... 	} 
.................... 	if(!linha2){ 
03E6:  BTFSC  F81.5
03E8:  BRA    03F6
.................... 		while(linha2==0); 
03EA:  BTFSS  F81.5
03EC:  BRA    03EA
.................... 		desabilitaMatriz(); 
03EE:  RCALL  025C
.................... 		return 6; 
03F0:  MOVLW  06
03F2:  MOVWF  01
03F4:  BRA    041C
.................... 	} 
.................... 	if(!linha3){ 
03F6:  BTFSC  F81.6
03F8:  BRA    0406
.................... 		while(linha3==0); 
03FA:  BTFSS  F81.6
03FC:  BRA    03FA
.................... 		desabilitaMatriz(); 
03FE:  RCALL  025C
.................... 		return 9; 
0400:  MOVLW  09
0402:  MOVWF  01
0404:  BRA    041C
.................... 	} 
.................... 	if(!linha4){ 
0406:  BTFSC  F81.7
0408:  BRA    0416
.................... 		while(linha4==0); 
040A:  BTFSS  F81.7
040C:  BRA    040A
.................... 		desabilitaMatriz(); 
040E:  RCALL  025C
.................... 		return 11; 
0410:  MOVLW  0B
0412:  MOVWF  01
0414:  BRA    041C
.................... 	} 
.................... 	desabilitaMatriz(); 
0416:  RCALL  025C
.................... 	return 12; 
0418:  MOVLW  0C
041A:  MOVWF  01
041C:  RETURN 0
.................... } 
....................  
.................... int varreTecladoManual(void) 
.................... { 
.................... 	coluna1 = 0; 
*
10B0:  BCF    F80.1
.................... 	if(!linha1){ 
10B2:  BTFSC  F81.4
10B4:  BRA    10C6
.................... 		while(linha1==0); 
10B6:  BTFSS  F81.4
10B8:  BRA    10B6
.................... 		if (vel<10) 
10BA:  MOVF   06,W
10BC:  SUBLW  09
10BE:  BNC   10C2
.................... 			vel++; 
10C0:  INCF   06,F
.................... 		desabilitaMatriz(); 
10C2:  CALL   025C
.................... 	} 
.................... 	if(!linha2){ 
10C6:  BTFSC  F81.5
10C8:  BRA    10D4
.................... 		desabilitaMatriz(); 
10CA:  CALL   025C
.................... 		return 4; 
10CE:  MOVLW  04
10D0:  MOVWF  01
10D2:  BRA    114E
.................... 	} 
.................... 	if(!linha4){ 
10D4:  BTFSC  F81.7
10D6:  BRA    10E2
.................... 		desabilitaMatriz(); 
10D8:  CALL   025C
.................... 		return 10; 
10DC:  MOVLW  0A
10DE:  MOVWF  01
10E0:  BRA    114E
.................... 	} 
.................... 	desabilitaMatriz(); 
10E2:  CALL   025C
.................... 	coluna2 = 0; 
10E6:  BCF    F80.2
.................... 	if(!linha1){ 
10E8:  BTFSC  F81.4
10EA:  BRA    10F6
.................... 		desabilitaMatriz(); 
10EC:  CALL   025C
.................... 		return 2; 
10F0:  MOVLW  02
10F2:  MOVWF  01
10F4:  BRA    114E
.................... 	} 
.................... 	if(!linha3){ 
10F6:  BTFSC  F81.6
10F8:  BRA    1104
.................... 		desabilitaMatriz(); 
10FA:  CALL   025C
.................... 		return 8; 
10FE:  MOVLW  08
1100:  MOVWF  01
1102:  BRA    114E
.................... 	} 
.................... 	if(!linha2){ 
1104:  BTFSC  F81.5
1106:  BRA    1110
.................... 		while(!linha2); 
1108:  BTFSS  F81.5
110A:  BRA    1108
.................... 		inverterAH(); 
110C:  BRA    1026
.................... 		exibirAH(); 
110E:  RCALL  0A40
.................... 	} 
.................... 	desabilitaMatriz(); 
1110:  CALL   025C
.................... 	coluna3 = 0; 
1114:  BCF    F80.3
.................... 	if(!linha1){ 
1116:  BTFSC  F81.4
1118:  BRA    112A
.................... 		while(linha1==0); 
111A:  BTFSS  F81.4
111C:  BRA    111A
.................... 		if (vel>3) 
111E:  MOVF   06,W
1120:  SUBLW  03
1122:  BC    1126
.................... 			vel--; 
1124:  DECF   06,F
.................... 		desabilitaMatriz(); 
1126:  CALL   025C
.................... 	} 
.................... 	if(!linha2){ 
112A:  BTFSC  F81.5
112C:  BRA    1138
.................... 		desabilitaMatriz(); 
112E:  CALL   025C
.................... 		return 6; 
1132:  MOVLW  06
1134:  MOVWF  01
1136:  BRA    114E
.................... 	} 
.................... 	if(!linha4){ 
1138:  BTFSC  F81.7
113A:  BRA    1146
.................... 		desabilitaMatriz(); 
113C:  CALL   025C
.................... 		return 11; 
1140:  MOVLW  0B
1142:  MOVWF  01
1144:  BRA    114E
.................... 	} 
.................... 	desabilitaMatriz(); 
1146:  CALL   025C
.................... 	return 0; 
114A:  MOVLW  00
114C:  MOVWF  01
114E:  GOTO   1244 (RETURN)
.................... } 
....................  
.................... void motorAR_antih(int v) 
.................... {    
.................... 	if(polo==2){    
1152:  MOVF   05,W
1154:  SUBLW  02
1156:  BNZ   118A
.................... 		bobd=1;  
1158:  BSF    F82.0
.................... 	    delay_ms(v); 
115A:  MOVFF  2C,46
115E:  CALL   0146
.................... 		bobd=0;   
1162:  BCF    F82.0
.................... 	 
.................... 		bobc=1;  
1164:  BSF    F84.2
.................... 	    delay_ms(v);  
1166:  MOVFF  2C,46
116A:  CALL   0146
.................... 		bobc=0; 
116E:  BCF    F84.2
.................... 	 
.................... 		bobb=1;  
1170:  BSF    F84.1
.................... 	    delay_ms(v);  
1172:  MOVFF  2C,46
1176:  CALL   0146
.................... 		bobb=0; 
117A:  BCF    F84.1
.................... 	 
.................... 		boba=1;   
117C:  BSF    F84.0
.................... 	    delay_ms(v); 
117E:  MOVFF  2C,46
1182:  CALL   0146
.................... 		boba=0; 
1186:  BCF    F84.0
.................... 	}else if (polo==1){ 
1188:  BRA    11BE
118A:  DECFSZ 05,W
118C:  BRA    11BE
.................... 		boba=1;   
118E:  BSF    F84.0
.................... 	    delay_ms(v); 
1190:  MOVFF  2C,46
1194:  CALL   0146
.................... 		boba=0; 
1198:  BCF    F84.0
.................... 	 
.................... 		bobb=1;  
119A:  BSF    F84.1
.................... 	    delay_ms(v);  
119C:  MOVFF  2C,46
11A0:  CALL   0146
.................... 		bobb=0; 
11A4:  BCF    F84.1
.................... 		 
.................... 		bobc=1;  
11A6:  BSF    F84.2
.................... 	    delay_ms(v);  
11A8:  MOVFF  2C,46
11AC:  CALL   0146
.................... 		bobc=0; 
11B0:  BCF    F84.2
.................... 	 
.................... 		bobd=1;  
11B2:  BSF    F82.0
.................... 	    delay_ms(v); 
11B4:  MOVFF  2C,46
11B8:  CALL   0146
.................... 		bobd=0;  
11BC:  BCF    F82.0
.................... 	} 
11BE:  RETURN 0
.................... } 
....................  
.................... void motorAR_h(int v) 
.................... {  
.................... 	if(polo==2){ 
11C0:  MOVF   05,W
11C2:  SUBLW  02
11C4:  BNZ   11F8
.................... 		boba=1;   
11C6:  BSF    F84.0
.................... 	    delay_ms(v); 
11C8:  MOVFF  2C,46
11CC:  CALL   0146
.................... 		boba=0; 
11D0:  BCF    F84.0
.................... 	 
.................... 		bobb=1;  
11D2:  BSF    F84.1
.................... 	    delay_ms(v);  
11D4:  MOVFF  2C,46
11D8:  CALL   0146
.................... 		bobb=0; 
11DC:  BCF    F84.1
.................... 		 
.................... 		bobc=1;  
11DE:  BSF    F84.2
.................... 	    delay_ms(v);  
11E0:  MOVFF  2C,46
11E4:  CALL   0146
.................... 		bobc=0; 
11E8:  BCF    F84.2
.................... 	 
.................... 		bobd=1;  
11EA:  BSF    F82.0
.................... 	    delay_ms(v); 
11EC:  MOVFF  2C,46
11F0:  CALL   0146
.................... 		bobd=0;  	  
11F4:  BCF    F82.0
.................... 	}else if (polo==1){ 
11F6:  BRA    122C
11F8:  DECFSZ 05,W
11FA:  BRA    122C
.................... 		bobd=1;  
11FC:  BSF    F82.0
.................... 	    delay_ms(v); 
11FE:  MOVFF  2C,46
1202:  CALL   0146
.................... 		bobd=0;   
1206:  BCF    F82.0
.................... 	 
.................... 		bobc=1;  
1208:  BSF    F84.2
.................... 	    delay_ms(v);  
120A:  MOVFF  2C,46
120E:  CALL   0146
.................... 		bobc=0; 
1212:  BCF    F84.2
.................... 	 
.................... 		bobb=1;  
1214:  BSF    F84.1
.................... 	    delay_ms(v);  
1216:  MOVFF  2C,46
121A:  CALL   0146
.................... 		bobb=0; 
121E:  BCF    F84.1
.................... 	 
.................... 		boba=1;   
1220:  BSF    F84.0
.................... 	    delay_ms(v); 
1222:  MOVFF  2C,46
1226:  CALL   0146
.................... 		boba=0; 
122A:  BCF    F84.0
.................... 	} 
122C:  RETURN 0
.................... } 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
